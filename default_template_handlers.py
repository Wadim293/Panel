import random
import asyncio
import redis.asyncio as redis
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import selectinload
from aiogram.types import Message, User
from db import Session
import datetime
from models import NFTGift, WorkerBot, WorkerBotUser, Template, UserGiftHistory
from aiogram import Bot
from aiogram.types import CallbackQuery
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.storage.base import StorageKey


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class DuelFSM(StatesGroup):
    waiting_opponent_username = State()
    waiting_nft_link = State()
    waiting_dice = State() 

# Redis –∫–ª–∏–µ–Ω—Ç
redis_client = redis.from_url(
    "rediss://default:AYFVAAIjcDE2MWYzZWFlNGJiMDI0OGU3OWFiYTMxMzAwOTA3NjA2NHAxMA@guiding-polecat-33109.upstash.io:6379",
    decode_responses=True
)

fsm_storage = RedisStorage(redis_client)

################## –®–ê–ë–õ–û–ù –ù–ï–ô–†–û–ù–ö–ò ################## 
async def is_default_template_active(token: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É –±–æ—Ç–∞ –±–∞–∑–æ–≤—ã–π (is_default=True) —à–∞–±–ª–æ–Ω.
    """
    async with Session() as session:
        userbot = await session.scalar(
            select(WorkerBot)
            .where(WorkerBot.token == token)
            .options(selectinload(WorkerBot.template))
        )
        if not userbot:
            return False
        template = userbot.template
        if not template and userbot.template_id:
            template = await session.scalar(select(Template).where(Template.id == userbot.template_id))
        return template is not None and template.is_default

async def handle_account_command(msg: Message, bot):
    token = bot.token
    async with Session() as session:
        userbot = await session.scalar(select(WorkerBot).where(WorkerBot.token == token))
        if not userbot:
            await bot.send_message(msg.chat.id, "‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        client = await session.scalar(
            select(WorkerBotUser).where(
                WorkerBotUser.worker_bot_id == userbot.id,
                WorkerBotUser.telegram_id == msg.from_user.id
            )
        )
        if not client:
            await bot.send_message(msg.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        text = f"""
<b>üë§ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{msg.from_user.id}</code>
‚≠êÔ∏è –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {"üíé Premium" if False else "üÜì Free"}
üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: -
üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: -
---------------------------
‚å®Ô∏è GPT 4.1 mini –∑–∞–ø—Ä–æ—Å—ã (24 —á): 20
    ‚îî Gemini 1.5 Pro: 20
‚å®Ô∏è GPT o3/o1/4.1 –∑–∞–ø—Ä–æ—Å—ã (24 —á): 0
    ‚îî ChatGPT 4o: 0
    ‚îî GPT 4o: 0
    ‚îî o4 mini: 0
    ‚îî DeepSeek: 0
    ‚îî Gemini 2.5 Pro: 0
üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å (–º–µ—Å): 1
üß† Claude —Ç–æ–∫–µ–Ω—ã: 0 /claude
üé∏ Suno –ø–µ—Å–Ω–∏ (–º–µ—Å): 0
üé¨ –í–∏–¥–µ–æ: 0
üìö –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã: 0 /academic
---------------------------
ü§ñ –î–æ–ø. –∑–∞–ø—Ä–æ—Å—ã GPT-4: 0
üåÖ –î–æ–ø. –∑–∞–ø—Ä–æ—Å—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 0
üé∏ –î–æ–ø. Suno –ø–µ—Å–Ω–∏: 0
---------------------------
ü§ñ GPT –º–æ–¥–µ–ª—å: /model
üé≠ GPT-–†–æ–ª—å: –û–±—ã—á–Ω—ã–π üîÅ
üí¨ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: üîÅ –û–±—ã—á–Ω—ã–π (?)
üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: 1.0
üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: ‚úÖ –í–∫–ª
üîâ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç: ‚ùå –í—ã–∫–ª
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: /settings</b>
""".strip()

        await bot.send_message(msg.chat.id, text, parse_mode="HTML")

async def handle_settings_command(msg: Message, bot):
    text = (
        "<b>‚öôÔ∏è –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        "1. –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å GPT & Claude.\n"
        "2. –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –¥–ª—è ChatGPT.\n"
        "3. –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.\n"
        "4. –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞.\n"
        "5. –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ö–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–µ–Ω, –±–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.\n"
        "6. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å GPT (–¥–æ—Å—Ç—É–ø–µ–Ω –≤ /premium).\n"
        "7. –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.</b>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å GPT & Claude", callback_data="stub")],
        [InlineKeyboardButton(text="üé≠ –í—ã–±—Ä–∞—Ç—å GPT - –†–æ–ª—å", callback_data="stub")],
        [InlineKeyboardButton(text="üí¨ –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è", callback_data="stub")],
        [InlineKeyboardButton(text="üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤", callback_data="stub")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", callback_data="stub")],
        [InlineKeyboardButton(text="üîâ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã", callback_data="stub")],
        [InlineKeyboardButton(text="üåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", callback_data="stub")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_settings")]
    ])

    await bot.send_message(msg.chat.id, text, reply_markup=keyboard, parse_mode="HTML")

async def handle_settings_close(callback_query: CallbackQuery, bot):
    try:
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def get_connection_instruction(bot_username: str) -> str:
    return (
        "üöÄ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        "1Ô∏è‚É£ <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞</b>\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª\n\n"
        "2Ô∏è‚É£ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É</b>\n"
        f"‚Ä¢ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ß–∞—Ç-–±–æ—Ç—ã¬ª\n"
        f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <code>@{bot_username}</code> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        "3Ô∏è‚É£ <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b>.\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
    )


############### –®–∞–±–ª–æ–Ω —Ä—É–ª–µ—Ç–∫–∞ ############### 
async def handle_prize_spin_callback(callback: CallbackQuery, bot: Bot):
    state = FSMContext(
        storage=fsm_storage,
        key=StorageKey(
            chat_id=callback.from_user.id,
            user_id=callback.from_user.id,
            bot_id=bot.id
        )
    )
    await state.set_state(DuelFSM.waiting_opponent_username)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="<b>üéØ –í–ø–∏—à–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥—É—ç–ª–∏:</b>",
        parse_mode="HTML"
    )


async def handle_instructions_callback(callback_query: CallbackQuery, bot: Bot):
    async with Session() as session:
        token = bot.token
        userbot = await session.scalar(
            select(WorkerBot).where(WorkerBot.token == token)
        )

        if not userbot or not userbot.username:
            await bot.answer_callback_query(callback_query.id, text="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        bot_username = userbot.username

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=(
            "<b>üíé –ö–∞–∫ –≤–æ–π—Ç–∏ –≤ –±–æ—Ç–∞ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–∑—ã?</b>\n\n"
            "–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ß–∞—Ç-–ë–æ—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ:\n\n"
            f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ ‚Äî <code>@{bot_username}</code>\n"
            "2. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –ë–∏–∑–Ω–µ—Å–∞\"\n"
            "3. –¢–∞–º –Ω–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ—á–∫—É \"–ß–∞—Ç-–ë–æ—Ç—ã\"\n"
            f"4. –í—Å—Ç–∞–≤—å—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ –∏ –≤—ã–¥–∞–π—Ç–µ –ß–∞—Ç-–ë–æ—Ç—É –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø!\n\n"
            "<b>–í–∞–∂–Ω–æ –≤—ã–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä—É–ª–µ—Ç–∫–∏</b>\n\n"
        ),
        parse_mode="HTML"
    )

# –ù–∞–∂–∞—Ç–∏–µ ¬´–†—É–ª–µ—Ç–∫–∞ –ø—Ä–∏–∑–æ–≤¬ª
async def handle_prize_spin_callback(callback: CallbackQuery, bot: Bot):
    state = FSMContext(
        storage=fsm_storage,
        key=StorageKey(
            chat_id=callback.from_user.id,
            user_id=callback.from_user.id,
            bot_id=bot.id
        )
    )
    await state.set_state(DuelFSM.waiting_opponent_username)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="<b>üéØ –í–ø–∏—à–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥—É—ç–ª–∏:</b>",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ username –ø–æ—Å–ª–µ /duel
async def receive_opponent_username(msg: Message, bot: Bot, token: str):
    state = FSMContext(
        storage=fsm_storage,
        key=StorageKey(
            chat_id=msg.chat.id,
            user_id=msg.from_user.id,
            bot_id=bot.id
        )
    )
    username = msg.text.strip().lstrip("@").lower()
    sender_id = msg.from_user.id

    async with Session() as session:
        userbot = await session.scalar(select(WorkerBot).where(WorkerBot.token == token))
        if not userbot:
            await bot.send_message(msg.chat.id, "‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        opponent = await session.scalar(
            select(WorkerBotUser).where(
                WorkerBotUser.worker_bot_id == userbot.id,
                WorkerBotUser.username.ilike(username)
            )
        )

        if not opponent:
            await bot.send_message(msg.chat.id, "‚ùå –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤.")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –≤ Redis
        await redis_client.setex(f"duel_request:{opponent.telegram_id}", 300, str(sender_id))

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="duel_accept"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="duel_decline")
            ]
        ])

        await bot.send_message(
            chat_id=opponent.telegram_id,
            text=(
                f"<b>‚öîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username or sender_id} —Ö–æ—á–µ—Ç —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å –≤–∞–º–∏!</b>\n\n"
                "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"
            ),
            reply_markup=kb,
            parse_mode="HTML"
        )

        await bot.send_message(msg.chat.id, "üîî –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–ø–æ–Ω–µ–Ω—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()

# –ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏
async def handle_duel_accept(callback: CallbackQuery, bot: Bot):
    opponent_id = callback.from_user.id  # –ü—Ä–∏–Ω—è–≤—à–∏–π
    initiator_id_str = await redis_client.get(f"duel_request:{opponent_id}")

    if not initiator_id_str:
        await bot.send_message(opponent_id, "‚ùå –ò—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
        return

    initiator_id = int(initiator_id_str)
    duel_id = f"duel:{initiator_id}:{opponent_id}"

    # –£–¥–∞–ª–∏–º –∑–∞–ø—Ä–æ—Å
    await redis_client.delete(f"duel_request:{opponent_id}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    await bot.send_message(
        chat_id=initiator_id,
        text="‚úÖ <b>–ò–≥—Ä–æ–∫ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤! –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>",
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥—É—ç–ª—å
    await redis_client.hset(duel_id, mapping={
        "initiator": initiator_id,
        "opponent": opponent_id,
        "initiator_roll": "",
        "opponent_roll": "",
        "nft_link": ""
    })
    await redis_client.expire(duel_id, 600)

    # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="make_bet")]
    ])

    await bot.send_message(
        chat_id=opponent_id,
        text="<b>üé≤ –°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!</b>\n–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ NFT –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nhttps://t.me/nft/ToyBear-21564",
        reply_markup=kb,
        parse_mode="HTML"
    )

async def handle_make_bet(callback: CallbackQuery, bot: Bot):
    opponent_id = callback.from_user.id

    state = FSMContext(
        storage=fsm_storage,
        key=StorageKey(
            chat_id=opponent_id,
            user_id=opponent_id,
            bot_id=bot.id
        )
    )
    await state.set_state(DuelFSM.waiting_nft_link)

    await redis_client.setex(f"awaiting_nft_link:{opponent_id}", 300, "1")

    await bot.send_message(
        chat_id=opponent_id,
        text="üîó –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ NFT, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å—Ç–∞–≤–∏—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/nft/ToyBear-21564)"
    )

async def handle_nft_link(msg: Message, bot: Bot):
    opponent_id = msg.from_user.id
    text = msg.text

    if not text:
        await bot.send_message(opponent_id, "‚ùå –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É —Ç–µ–∫—Å—Ç–æ–º.")
        return

    text = text.strip()
    if not text.startswith("https://t.me/nft/"):
        await bot.send_message(opponent_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –§–æ—Ä–º–∞—Ç: https://t.me/nft/...")
        return

    awaiting = await redis_client.get(f"awaiting_nft_link:{opponent_id}")
    if not awaiting:
        return

    await redis_client.delete(f"awaiting_nft_link:{opponent_id}")

    keys = await redis_client.keys(f"duel:*:{opponent_id}")
    if not keys:
        await bot.send_message(opponent_id, "‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    duel_id = keys[0]
    await redis_client.hset(duel_id, "nft_link", text)
    initiator_id = int(await redis_client.hget(duel_id, "initiator"))

    await bot.send_message(
        chat_id=initiator_id,
        text=f"üéØ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É:\nüîó {text}",
        parse_mode="HTML"
    )
    await bot.send_message(opponent_id, "üîÑ –°—Ç–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å!")

    fake_trigger_message = Message.model_construct(
        from_user=User.model_construct(id=initiator_id),
        chat={"id": initiator_id}
    )
    await handle_dice(fake_trigger_message, bot)

async def handle_dice(msg: Message, bot: Bot):
    user_id = msg.from_user.id

    duel_keys = await redis_client.keys("duel:*")
    for key in duel_keys:
        duel_data = await redis_client.hgetall(key)
        initiator = int(duel_data.get("initiator", 0))
        opponent = int(duel_data.get("opponent", 0))

        if user_id != initiator:
            return  

        start_text = "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ <b>5 —Å–µ–∫—É–Ω–¥</b>..."
        for uid in (initiator, opponent):
            await bot.send_message(chat_id=uid, text=start_text, parse_mode="HTML")

        await asyncio.sleep(5)

        initiator_dice = await bot.send_dice(chat_id=initiator, emoji="üé≤")
        initiator_value = initiator_dice.dice.value
        await asyncio.sleep(3)
        await redis_client.hset(key, "initiator_roll", initiator_value)

        opponent_dice = await bot.send_dice(chat_id=opponent, emoji="üé≤")
        opponent_value = opponent_dice.dice.value
        await asyncio.sleep(3)
        await redis_client.hset(key, "opponent_roll", opponent_value)

        nft_link = duel_data.get("nft_link", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        winner_text = f"üèÜ –¢—ã –ø–æ–±–µ–¥–∏–ª –∏ –∑–∞–±–∏—Ä–∞–µ—à—å NFT!\nüîó {nft_link}"
        loser_text = f"üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –í—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞", callback_data="claim_prize")]
            ]
        )

        await bot.send_message(chat_id=initiator, text=winner_text, reply_markup=keyboard, parse_mode="HTML")
        await bot.send_message(chat_id=opponent, text=loser_text, parse_mode="HTML")

        for uid in (initiator, opponent):
            state = FSMContext(
                storage=fsm_storage,
                key=StorageKey(bot_id=bot.id, chat_id=uid, user_id=uid)
            )
            await state.clear()

        await redis_client.delete(key)
        return

async def handle_claim_prize(callback: CallbackQuery, bot: Bot, bot_username: str):
    text = (
        "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
        "–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –¥—É—ç–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ NFT-–ø–æ–¥–∞—Ä–æ–∫.\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –∫ —Å–≤–æ–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ:\n\n"
        "üöÄ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</b>\n\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª\n\n"
        "1Ô∏è‚É£ <b>–†–∞–∑–¥–µ–ª –ß–∞—Ç-–±–æ—Ç—ã </b>\n"
        f"‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ ¬´–ß–∞—Ç-–±–æ—Ç—ã¬ª —É–∫–∞–∂–∏—Ç–µ <code>@{bot_username}</code> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        "2Ô∏è‚É£ <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b>\n"
        "‚Ä¢ –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è NFT"
    )

    await bot.send_message(chat_id=callback.from_user.id, text=text, parse_mode="HTML")
    await bot.answer_callback_query(callback.id)

async def handle_spin_callback(callback: CallbackQuery, bot: Bot):
    await bot.send_message(
        callback.from_user.id,
        "<b>‚ùå–û—à–∏–±–∫–∞‚ùå</b>\n\n<b>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ –≤—ã–¥–∞–π—Ç–µ –±–æ—Ç—É –≤—Å–µ –ø—Ä–∞–≤–∞. "
        "–ö–∞–∫ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.</b>",
        parse_mode="HTML"
    )


def main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèõ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É", callback_data="spin")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")],
        [InlineKeyboardButton(text="üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")]
    ])

def inventory_keyboard(gift_name=None):
    if not gift_name:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="giftspin_back")]
        ])
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí∏ –í—ã–≤–µ—Å—Ç–∏ {gift_name}", callback_data=f"giftspin_withdraw_{gift_name}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="giftspin_back")]
    ])

def instruction_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="giftspin_back")]
    ])

async def send_message_safe(bot, chat_id, text, **kwargs):
    await bot.send_message(chat_id, text, **kwargs)

async def try_delete_message(bot, chat_id, message_id):
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception:
        pass

async def get_last_spin_time(user_telegram_id, bot: 'Bot'):
    async with Session() as session:
        worker_bot = await session.scalar(
            select(WorkerBot).where(WorkerBot.token == bot.token)
        )
        if not worker_bot:
            return None
        user = await session.scalar(
            select(WorkerBotUser)
            .where(WorkerBotUser.worker_bot_id == worker_bot.id)
            .where(WorkerBotUser.telegram_id == user_telegram_id)
        )
        if not user:
            return None

        record = await session.scalar(
            select(UserGiftHistory.won_at)
            .where(UserGiftHistory.user_id == user.id)
            .where(UserGiftHistory.worker_bot_id == worker_bot.id)
            .order_by(UserGiftHistory.id.desc())
        )
        return record

async def can_spin_gift(user_telegram_id, bot: 'Bot', minutes=30):
    last_spin_time = await get_last_spin_time(user_telegram_id, bot)
    if last_spin_time is None:
        return True, None
    now = datetime.datetime.now(datetime.timezone.utc)
    if last_spin_time.tzinfo is None:
        last_spin_time = last_spin_time.replace(tzinfo=datetime.timezone.utc)
    diff = (now - last_spin_time).total_seconds()
    if diff >= minutes * 60:
        return True, None
    wait_minutes = int((minutes * 60 - diff) // 60) + 1
    return False, wait_minutes

async def get_next_gift_url(user_telegram_id, bot: 'Bot'):
    async with Session() as session:
        gifts = await session.execute(select(NFTGift).order_by(NFTGift.id))
        gifts = gifts.scalars().all()
        if not gifts:
            return None, None, None
        total_gifts = len(gifts)

        worker_bot = await session.scalar(select(WorkerBot).where(WorkerBot.token == bot.token))
        if not worker_bot:
            return None, None, None
        user = await session.scalar(
            select(WorkerBotUser)
            .where(WorkerBotUser.worker_bot_id == worker_bot.id)
            .where(WorkerBotUser.telegram_id == user_telegram_id)
        )
        if not user:
            return None, None, None

        last_gift = await session.scalar(
            select(UserGiftHistory)
            .where(UserGiftHistory.user_id == user.id)
            .where(UserGiftHistory.worker_bot_id == worker_bot.id)
            .order_by(UserGiftHistory.id.desc())
        )

        if not last_gift or last_gift.gift_index is None:
            next_index = random.randint(0, total_gifts - 1)
        else:
            next_index = (last_gift.gift_index + 1) % total_gifts

        gift = gifts[next_index]
        gift_slug = gift.url.split("/")[-1]
        return gift_slug, gift.url, next_index

async def save_gift_for_user(user_telegram_id, bot: 'Bot'):
    gift_name, gift_url, gift_index = await get_next_gift_url(user_telegram_id, bot)
    if not gift_url:
        return None, None
    async with Session() as session:
        worker_bot = await session.scalar(
            select(WorkerBot).where(WorkerBot.token == bot.token)
        )
        if not worker_bot:
            return None, None
        user = await session.scalar(
            select(WorkerBotUser)
            .where(WorkerBotUser.worker_bot_id == worker_bot.id)
            .where(WorkerBotUser.telegram_id == user_telegram_id)
        )
        if not user:
            return None, None

        record = UserGiftHistory(
            user_id=user.id,
            worker_bot_id=worker_bot.id,
            gift_slug=gift_name,
            gift_url=gift_url,
            gift_index=gift_index
        )
        session.add(record)
        await session.commit()
        return gift_name, gift_url

async def get_last_gift_for_user(user_telegram_id, bot: 'Bot'):
    async with Session() as session:
        worker_bot = await session.scalar(
            select(WorkerBot).where(WorkerBot.token == bot.token)
        )
        if not worker_bot:
            return None, None
        user = await session.scalar(
            select(WorkerBotUser)
            .where(WorkerBotUser.worker_bot_id == worker_bot.id)
            .where(WorkerBotUser.telegram_id == user_telegram_id)
        )
        if not user:
            return None, None

        record = await session.scalar(
            select(UserGiftHistory)
            .where(UserGiftHistory.user_id == user.id)
            .where(UserGiftHistory.worker_bot_id == worker_bot.id)
            .order_by(UserGiftHistory.id.desc())
        )
        if not record:
            return None, None
        return record.gift_slug, record.gift_url

async def process_giftspin_message(msg, bot, bot_username):
    await send_message_safe(
        bot,
        msg.chat.id,
        "<b>üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "‚ú® –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –∑–∞ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç–µ <b>1 –í—Ä–∞—â–µ–Ω–∏–µ!</b> ‚ú®\n\n"
        "<b>–ß—Ç–æ —Ç—É—Ç –¥–µ–ª–∞—Ç—å?:</b>\n"
        "1Ô∏è‚É£ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ NFT-–ø–æ–¥–∞—Ä–∫–∏\n"
        "3Ô∏è‚É£ –í—ã–≤–æ–¥–∏—Ç—å –∏—Ö –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –í–´–ò–ì–†–ê–¢–¨!",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )

async def process_giftspin_callback(callback, bot, chat_id, bot_username):
    if callback.data == "spin":
        can_spin, wait_minutes = await can_spin_gift(callback.from_user.id, bot, minutes=30)
        if not can_spin:
            await bot.answer_callback_query(
                callback.id,
                text=f"–í—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ä—É–ª–µ—Ç–∫—É! –í–µ—Ä–Ω–∏—Ç–µ—Å—å —á—É—Ç—å –ø–æ–∑–∂–µ.",
                show_alert=True
            )
            return
        await try_delete_message(bot, chat_id, callback.message.message_id)
        await bot.answer_callback_query(callback.id)  # –æ—Ç–≤–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑!
        gift_name, gift_url = await save_gift_for_user(callback.from_user.id, bot)
        if not gift_name:
            await send_message_safe(
                bot, chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML"
            )
            return
        
        await send_message_safe(bot, chat_id, "üéâ")

        await send_message_safe(
            bot,
            chat_id,
            f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª: <a href=\"{gift_url}\">{gift_name}</a>",
            parse_mode="HTML",
            reply_markup=inventory_keyboard(gift_name),
            disable_web_page_preview=False
        )
        return

    if callback.data == "instructions":
        await try_delete_message(bot, chat_id, callback.message.message_id)
        await bot.answer_callback_query(callback.id)
        instruction_text = (
            "üöÄ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
            "1Ô∏è‚É£ <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞</b>\n"
            "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª\n\n"
            "2Ô∏è‚É£ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É</b>\n"
            f"‚Ä¢ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ß–∞—Ç-–±–æ—Ç—ã¬ª\n"
            f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <code>@{bot_username}</code> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
            "3Ô∏è‚É£ <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b>.\n\n"
            "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
        )
        await send_message_safe(
            bot,
            chat_id,
            instruction_text,
            parse_mode="HTML",
            reply_markup=instruction_keyboard()
        )
        return

    if callback.data == "inventory":
        await try_delete_message(bot, chat_id, callback.message.message_id)
        await bot.answer_callback_query(callback.id)
        gift_name, gift_url = await get_last_gift_for_user(callback.from_user.id, bot)
        if not gift_name:
            await send_message_safe(
                bot,
                chat_id,
                "üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.",
                parse_mode="HTML",
                reply_markup=inventory_keyboard()
            )
            return
        msg_text = (
            f"üì¶ <b>–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n"
            f"- <a href=\"{gift_url}\">{gift_name}</a>\n"
        )
        await send_message_safe(
            bot,
            chat_id,
            msg_text,
            parse_mode="HTML",
            reply_markup=inventory_keyboard(gift_name),
            disable_web_page_preview=False
        )
        return

    if callback.data == "giftspin_back":
        await try_delete_message(bot, chat_id, callback.message.message_id)
        await bot.answer_callback_query(callback.id)
        await send_message_safe(
            bot,
            chat_id,
            "<b>üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "‚ú® –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –∑–∞ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç–µ <b>1 –í—Ä–∞—â–µ–Ω–∏–µ!</b> ‚ú®\n\n"
            "<b>–ß—Ç–æ —Ç—É—Ç –¥–µ–ª–∞—Ç—å?:</b>\n"
            "1Ô∏è‚É£ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
            "2Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ NFT-–ø–æ–¥–∞—Ä–∫–∏\n"
            "3Ô∏è‚É£ –í—ã–≤–æ–¥–∏—Ç—å –∏—Ö –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –í–´–ò–ì–†–ê–¢–¨!",
            parse_mode="HTML",
            reply_markup=main_menu_keyboard()
        )
        return

    if callback.data.startswith("giftspin_withdraw_"):
        await try_delete_message(bot, chat_id, callback.message.message_id)
        await bot.answer_callback_query(callback.id)
        instruction_text = (
            "üöÄ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
            "1Ô∏è‚É£ <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞</b>\n"
            "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª\n\n"
            "2Ô∏è‚É£ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É</b>\n"
            f"‚Ä¢ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ß–∞—Ç-–±–æ—Ç—ã¬ª\n"
            f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <code>@{bot_username}</code> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
            "3Ô∏è‚É£ <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b>.\n\n"
            "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
        )
        await send_message_safe(
            bot,
            chat_id,
            instruction_text,
            parse_mode="HTML",
            reply_markup=instruction_keyboard()
        )
        return