from aiogram import Router, F, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update, delete
from db import Session
from models import Admin, CustomGift
import re
import json

router = Router()

TEMPLATES_PER_PAGE = 6

class InlineTemplateState(StatesGroup):
    waiting_name = State()
    waiting_nft = State()
    waiting_button_text = State()
    waiting_message_text = State()
    waiting_ref_message_text = State()  
    editing_message_text = State()
    editing_button_text = State()
    editing_links = State()
    editing_ref_message_text = State()  

async def get_inline_templates_content() -> tuple[str, InlineKeyboardMarkup]:
    text = (
        "<b>‚ö°Ô∏è Inline Mod - –®–∞–±–ª–æ–Ω—ã</b>\n\n"
        "<b>–°–æ–∑–¥–∞–π —Å–≤–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω</b>\n"
        "<b>‚ùì –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –∏–Ω–ª–∞–π–Ω</b> <a href=\"https://teletype.in/@bebe3414/Fq3aeGKZbHx\"><b>–ú–∞–Ω—É–∞–ª</b></a>\n"
        "<blockquote>"
        "<b>üîó –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å Inline-—à–∞–±–ª–æ–Ω –∫ –±–æ—Ç—É:</b>\n"
        "1. –û—Ç–∫—Ä–æ–π –º–µ–Ω—é <b>–ë–æ—Ç—ã</b>\n"
        "2. –í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n"
        "3. –ù–∞–∂–º–∏ <b>–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ò–Ω–ª–∞–π–Ω</b>\n"
        "4. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –∏–Ω–ª–∞–π–Ω-—à–∞–±–ª–æ–Ω\n"
        "</blockquote>\n"
        "<i>–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–æ—Ç —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å Inline-–ø—Ä–µ–≤—å—é!</i>"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å", callback_data="inline_tpl_create")],
            [InlineKeyboardButton(text="–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data="inline_tpl_list")]
        ]
    )
    return text, kb

@router.message(F.text == "‚ö°Ô∏è Inline Mod")
async def inline_templates_handler(message: types.Message):
    if message.chat.type != "private":
        await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return

    text, kb = await get_inline_templates_content()
    await message.answer(
        text,
        reply_markup=kb,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data == "inline_tpl_create")
async def start_template_create(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(InlineTemplateState.waiting_name)
    await callback.message.edit_text("<b>‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</b>", parse_mode="HTML")
    await callback.answer()

@router.message(InlineTemplateState.waiting_name)
async def input_name(message: types.Message, state: FSMContext):
    await state.update_data(template_name=message.text.strip())
    await state.set_state(InlineTemplateState.waiting_nft)
    await message.answer(
        "<b>üì• –í–≤–µ–¥–∏—Ç–µ –¥–æ 10 —Å—Å—ã–ª–æ–∫ –≤–∏–¥–∞:\nhttps://t.me/nft/ValentineBox-20352</b>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.message(InlineTemplateState.waiting_nft)
async def input_nfts(message: types.Message, state: FSMContext):
    slugs = re.findall(r"https://t\.me/nft/([A-Za-z0-9\-]+)", message.text)
    if not slugs:
        await message.answer("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
        return
    if len(slugs) > 10:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Å—Å—ã–ª–æ–∫.")
        return
    await state.update_data(nft_slugs=slugs)
    await state.set_state(InlineTemplateState.waiting_button_text)
    await message.answer("<b>‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b>", parse_mode="HTML")

@router.message(InlineTemplateState.waiting_button_text)
async def input_button(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text.strip())
    await state.set_state(InlineTemplateState.waiting_message_text)
    await message.answer(
        "<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n<b>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.</b>",
        parse_mode="HTML"
    )

@router.message(InlineTemplateState.waiting_message_text)
async def input_text(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.html_text)
    await state.set_state(InlineTemplateState.waiting_ref_message_text)
    await message.answer(
        "<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:</b>\n\n"
        "<b>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.</b>",
        parse_mode="HTML"
    )

@router.message(InlineTemplateState.waiting_ref_message_text)
async def input_ref_message_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tg_id = message.from_user.id

    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            await message.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        gift = CustomGift(
            admin_id=admin.id,
            template_name=data["template_name"],
            slugs=json.dumps(data["nft_slugs"]),
            message_text=data["message_text"],
            button_text=data["button_text"],
            ref_message_text=message.html_text,
            lang="RU"
        )
        session.add(gift)
        await session.commit()

    await state.clear()
    await message.answer(
        f"<b>‚úÖ –®–∞–±–ª–æ–Ω '{data['template_name']}' —Å–æ–∑–¥–∞–Ω.</b>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    text, kb = await get_inline_templates_content()
    await message.answer(
        text,
        reply_markup=kb,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.callback_query(F.data.startswith("inline_tpl_list"))
async def show_my_templates(callback: types.CallbackQuery):
    tg_id = callback.from_user.id

    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
    parts = callback.data.split(":")
    page = int(parts[1]) if len(parts) > 1 else 1

    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            await callback.message.edit_text("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        result = await session.execute(
            select(CustomGift.template_name)
            .where(CustomGift.admin_id == admin.id)
            .distinct()
        )
        names = result.scalars().all()

    if not names:
        text = (
            "<b>üìÅ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.</b>\n\n"
            "<i>–°–æ–∑–¥–∞–π —Å–≤–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞!</i>"
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å", callback_data="inline_tpl_create")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="inline_tpl_back")]
            ]
        )
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer()
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total = len(names)
    pages = (total + TEMPLATES_PER_PAGE - 1) // TEMPLATES_PER_PAGE
    page = max(1, min(page, pages))
    start = (page - 1) * TEMPLATES_PER_PAGE
    end = start + TEMPLATES_PER_PAGE
    page_names = names[start:end]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    buttons = []
    row = []
    for i, name in enumerate(page_names):
        row.append(InlineKeyboardButton(text=name, callback_data=f"inline_tpl_show_{name}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    nav = []
    nav.append(InlineKeyboardButton(text="<", callback_data=f"inline_tpl_list:{page-1}" if page > 1 else "ignore"))
    nav.append(InlineKeyboardButton(text=f"{page}/{pages}", callback_data="ignore"))
    nav.append(InlineKeyboardButton(text=">", callback_data=f"inline_tpl_list:{page+1}" if page < pages else "ignore"))
    buttons.append(nav)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="inline_tpl_back")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("<b>üìÅ –¢–≤–æ–∏ —à–∞–±–ª–æ–Ω—ã:</b>", reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: types.CallbackQuery):
    await callback.answer()  

@router.callback_query(F.data == "inline_tpl_back")
async def inline_templates_back(callback: types.CallbackQuery):
    text, kb = await get_inline_templates_content()
    await callback.message.edit_text(
        text,
        reply_markup=kb,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data.startswith("inline_tpl_show_"))
async def show_template_actions(callback: types.CallbackQuery, state: FSMContext):  
    await state.clear()  
    template_name = callback.data.replace("inline_tpl_show_", "", 1)
    tg_id = callback.from_user.id

    text, kb = await get_template_info_menu(tg_id, template_name)
    await callback.message.edit_text(
        text,
        reply_markup=kb,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()

async def get_template_info_menu(tg_id: int, template_name: str) -> tuple[str, InlineKeyboardMarkup]:
    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            return "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", InlineKeyboardMarkup(inline_keyboard=[])

        gift = await session.scalar(
            select(CustomGift).where(
                CustomGift.admin_id == admin.id,
                CustomGift.template_name == template_name
            )
        )

    if not gift:
        return "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", InlineKeyboardMarkup(inline_keyboard=[])

    slugs = json.loads(gift.slugs)
    links = "\n".join([
        f'<b><a href="https://t.me/nft/{slug}">{slug.split("-")[0]}</a></b>'
        for slug in slugs
    ])
    button_text = gift.button_text
    message_text = gift.message_text
    ref_message_text = gift.ref_message_text or "<i>–ù–µ –∑–∞–¥–∞–Ω</i>"
    ref_enabled = getattr(gift, "ref_enabled", False)

    # –ù–∞–¥–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    ref_toggle = "‚úÖ –†–µ—Ñ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω" if ref_enabled else "‚ùå –†–µ—Ñ-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω"

    text = (
        f"<b>üì¶ –®–∞–±–ª–æ–Ω: {template_name}</b>\n\n"
        f"<b>üîó –°—Å—ã–ª–∫–∏ NFT:</b>\n<blockquote>{links}</blockquote>\n\n"
        f"<b>üîò –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b>\n{button_text}\n\n"
        f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_text}\n\n"
        f"<b>üéÅ –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ—Ñ:</b>\n{ref_message_text}\n\n"
        f"<b>{ref_toggle}</b>"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ-—Ä–µ–∂–∏–º", callback_data=f"inline_tpl_toggle_ref_{template_name}")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"inline_tpl_edit_msg_{template_name}")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏", callback_data=f"inline_tpl_edit_btn_{template_name}")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ—Ñ", callback_data=f"inline_tpl_edit_refmsg_{template_name}")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ NFT", callback_data=f"inline_tpl_edit_links_{template_name}")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"inline_tpl_delete_{template_name}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="inline_tpl_list")]
        ]
    )

    return text, kb

@router.callback_query(F.data.startswith("inline_tpl_toggle_ref_"))
async def toggle_ref_mode(callback: types.CallbackQuery):
    template_name = callback.data.replace("inline_tpl_toggle_ref_", "", 1)
    tg_id = callback.from_user.id

    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            await callback.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        gift = await session.scalar(
            select(CustomGift).where(
                CustomGift.admin_id == admin.id,
                CustomGift.template_name == template_name
            )
        )
        if not gift:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        gift.ref_enabled = not bool(getattr(gift, "ref_enabled", False))
        await session.commit()

    text, kb = await get_template_info_menu(tg_id, template_name)
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.bot.send_message(
        callback.from_user.id,
        text,
        reply_markup=kb,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()

@router.callback_query(F.data.startswith("inline_tpl_edit_msg_"))
async def edit_template_message(callback: types.CallbackQuery, state: FSMContext):
    template_name = callback.data.replace("inline_tpl_edit_msg_", "", 1)
    await state.clear() 
    await state.update_data(template_name=template_name)
    await state.set_state(InlineTemplateState.editing_message_text)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"inline_tpl_show_{template_name}")]
        ]
    )

    await callback.message.edit_text(
        "<b>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n<b>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(InlineTemplateState.editing_message_text)
async def save_new_message_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_name = data["template_name"]
    tg_id = message.from_user.id

    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            await message.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await session.execute(
            update(CustomGift)
            .where(CustomGift.admin_id == admin.id, CustomGift.template_name == template_name)
            .values(message_text=message.html_text)
        )
        await session.commit()

    await state.clear()
    text, kb = await get_template_info_menu(tg_id, template_name)
    await message.answer(text, reply_markup=kb, parse_mode="HTML", disable_web_page_preview=True)

@router.callback_query(F.data.startswith("inline_tpl_edit_btn_"))
async def edit_template_button_text(callback: types.CallbackQuery, state: FSMContext):
    template_name = callback.data.replace("inline_tpl_edit_btn_", "", 1)
    await state.clear()
    await state.update_data(template_name=template_name)
    await state.set_state(InlineTemplateState.editing_button_text)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"inline_tpl_show_{template_name}")]
        ]
    )

    await callback.message.edit_text(
        "<b>üîò –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(InlineTemplateState.editing_button_text)
async def save_new_button_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_name = data["template_name"]
    tg_id = message.from_user.id

    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            await message.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await session.execute(
            update(CustomGift)
            .where(CustomGift.admin_id == admin.id, CustomGift.template_name == template_name)
            .values(button_text=message.text.strip())
        )
        await session.commit()

    await state.clear()
    text, kb = await get_template_info_menu(tg_id, template_name)
    await message.answer(text, reply_markup=kb, parse_mode="HTML", disable_web_page_preview=True)

@router.callback_query(F.data.startswith("inline_tpl_edit_links_"))
async def edit_template_links(callback: types.CallbackQuery, state: FSMContext):
    template_name = callback.data.replace("inline_tpl_edit_links_", "", 1)
    await state.clear()
    await state.update_data(template_name=template_name)
    await state.set_state(InlineTemplateState.editing_links)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"inline_tpl_show_{template_name}")]
        ]
    )

    await callback.message.edit_text(
        "<b>üì• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ (–¥–æ 10 —à—Ç):\nhttps://t.me/nft/Slug</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(InlineTemplateState.editing_links)
async def save_new_links(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_name = data["template_name"]
    tg_id = message.from_user.id

    slugs = re.findall(r"https://t\.me/nft/([A-Za-z0-9\-]+)", message.text)
    if not slugs:
        await message.answer("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
        return
    if len(slugs) > 10:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Å—Å—ã–ª–æ–∫.")
        return

    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            await message.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await session.execute(
            update(CustomGift)
            .where(CustomGift.admin_id == admin.id, CustomGift.template_name == template_name)
            .values(slugs=json.dumps(slugs))
        )
        await session.commit()

    await state.clear()
    text, kb = await get_template_info_menu(tg_id, template_name)
    await message.answer(text, reply_markup=kb, parse_mode="HTML", disable_web_page_preview=True)

@router.callback_query(F.data.startswith("inline_tpl_delete_"))
async def delete_template(callback: types.CallbackQuery, state: FSMContext):
    template_name = callback.data.replace("inline_tpl_delete_", "", 1)
    tg_id = callback.from_user.id

    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            await callback.message.edit_text(
                "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            await state.clear()
            return

        await session.execute(
            delete(CustomGift).where(
                CustomGift.admin_id == admin.id,
                CustomGift.template_name == template_name
            )
        )
        await session.commit()

    await callback.message.edit_text(
        f"<b>üóëÔ∏è –®–∞–±–ª–æ–Ω <u>{template_name}</u> —É–¥–∞–ª—ë–Ω.</b>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    text, kb = await get_inline_templates_content()
    await callback.message.answer(
        text,
        reply_markup=kb,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()

@router.callback_query(F.data.startswith("inline_tpl_edit_refmsg_"))
async def edit_ref_message_text(callback: types.CallbackQuery, state: FSMContext):
    template_name = callback.data.replace("inline_tpl_edit_refmsg_", "", 1)
    await state.clear()
    await state.update_data(template_name=template_name)
    await state.set_state(InlineTemplateState.editing_ref_message_text)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"inline_tpl_show_{template_name}")]
        ]
    )

    await callback.message.edit_text(
        "<b>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ:</b>\n\n<b>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(InlineTemplateState.editing_ref_message_text)
async def save_new_ref_message_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_name = data["template_name"]
    tg_id = message.from_user.id

    async with Session() as session:
        admin = await session.scalar(select(Admin).where(Admin.telegram_id == tg_id))
        if not admin:
            await message.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await session.execute(
            update(CustomGift)
            .where(CustomGift.admin_id == admin.id, CustomGift.template_name == template_name)
            .values(ref_message_text=message.html_text)
        )
        await session.commit()

    await state.clear()
    text, kb = await get_template_info_menu(tg_id, template_name)
    await message.answer(text, reply_markup=kb, parse_mode="HTML", disable_web_page_preview=True)