import asyncio
import os

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest, TelegramUnauthorizedError

from sqlalchemy import delete, select
from sqlalchemy.orm import selectinload

from config import BOT_TOKEN
from db import Session
from models import BusinessConnection, WorkerBot, WorkerBotUser

main_bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

LOG_FILE_PATH = "logs/worker_bot_check.log"
os.makedirs("logs", exist_ok=True)

def write_log(text: str):
    with open(LOG_FILE_PATH, "a", encoding="utf-8") as f:
        f.write(text.strip() + "\n")

async def check_worker_bots_once():
    write_log("[CHECK_WORKER_BOTS] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Ä–∫–µ—Ä-–±–æ—Ç–æ–≤...")

    async with Session() as session:
        result = await session.execute(
            select(WorkerBot).options(selectinload(WorkerBot.owner))
        )
        bots = result.scalars().all()

        for bot_data in bots:
            token = bot_data.token
            bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))

            try:
                me = await bot.get_me()
                write_log(f"[OK] @{me.username} ‚Äî –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")

            except TelegramUnauthorizedError:
                write_log(f"[DELETED] Bot ID {bot_data.telegram_id}: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –±–æ—Ç —É–¥–∞–ª—ë–Ω")

                try:
                    username = f"@{bot_data.username}" if bot_data.username else f"ID {bot_data.telegram_id}"

                    stats_text = (
                        f"<b>üìâ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n"
                        f"‚Ä¢ –ó–∞–ø—É—Å–∫–æ–≤: <b>{bot_data.launches}</b>\n"
                        f"‚Ä¢ –ü—Ä–µ–º–∏—É–º –∑–∞–ø—É—Å–∫–æ–≤: <b>{bot_data.premium_launches}</b>\n"
                        f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: <b>{bot_data.connection_count}</b>"
                    )

                    notify_text = (
                        f"<b>ü§ñ –ë–æ—Ç {username} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.</b>\n"
                        f"–û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—ë–Ω –∏–∑ –ø–∞–Ω–µ–ª–∏.\n\n"
                        f"{stats_text}\n\n"
                        f"üîÅ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏."
                    )

                    if bot_data.owner:
                        await main_bot.send_message(chat_id=bot_data.owner.telegram_id, text=notify_text)

                except Exception as e:
                    write_log(f"[NOTIFY_ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

                try:
                    await session.execute(
                        delete(BusinessConnection).where(BusinessConnection.worker_bot_id == bot_data.id)
                    )
                    await session.execute(
                        delete(WorkerBotUser).where(WorkerBotUser.worker_bot_id == bot_data.id)
                    )
                    await session.delete(bot_data)
                    await session.commit()
                    write_log(f"[DB] –£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ ID {bot_data.telegram_id}")
                except Exception as db_error:
                    write_log(f"[DB_ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {db_error}")

            except TelegramBadRequest as e:
                write_log(f"[ERROR] Bot ID {bot_data.telegram_id}: {e}")
            except Exception as e:
                write_log(f"[EXCEPTION] Bot ID {bot_data.telegram_id}: {e}")
            finally:
                await bot.session.close()

            await asyncio.sleep(0.5)

    write_log("[CHECK_WORKER_BOTS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def check_worker_bots_loop():
    while True:
        await check_worker_bots_once()
        await asyncio.sleep(2000)