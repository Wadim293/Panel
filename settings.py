from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from db import Session
from models import Admin, Settings, WorkerBot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

router = Router()

class AddIDState(StatesGroup):
    waiting_for_id = State()

async def get_admin_and_settings(tg_id: int):
    async with Session() as session:
        stmt_admin = select(Admin).where(Admin.telegram_id == tg_id)
        admin = (await session.execute(stmt_admin)).scalar_one_or_none()
        if not admin:
            return None, None

        stmt_settings = select(Settings).where(Settings.admin_id == admin.id)
        settings = (await session.execute(stmt_settings)).scalar_one_or_none()

        if not settings:
            settings = Settings(admin_id=admin.id, payout_ids="")
            session.add(settings)
            await session.commit()

        return admin, settings

async def send_transfer_status(message_or_callback):
    if isinstance(message_or_callback, types.Message):
        tg_id = message_or_callback.from_user.id
    else:
        tg_id = message_or_callback.from_user.id

    _, settings = await get_admin_and_settings(tg_id)
    payout_connected = "‚úÖ <b>–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.</b>" if settings and settings.payout_ids else "‚ùå <b>–ü–µ—Ä–µ–¥–∞—á–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.</b>"

    text = (
        "üöÄ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏</b> –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å NFT –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n"
        "‚öôÔ∏è <b>–î–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏</b> –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ, –∫—É–¥–∞ –∏–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∞.\n\n"
        f"{payout_connected}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É", callback_data="add_payout_id")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manage_workers")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏", callback_data="open_transfer_menu")]
    ])

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await message_or_callback.answer()

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    if message.chat.type != "private":
        await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return

    await send_transfer_status(message)

@router.callback_query(F.data == "add_payout_id")
async def add_payout_id_start(callback: types.CallbackQuery, state: FSMContext):
    text = (
        "<b>üì• –ü—Ä–∏—à–ª–∏—Ç–µ Telegram ID</b> –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏.\n\n"
        "üîé –£–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –±–æ—Ç–µ: <b>@getmyid_bot</b>\n"
        "üëÜ –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>Start</b> –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ ID.\n\n"
        "‚ö†Ô∏è <b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç.</b>\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤."
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AddIDState.waiting_for_id)
    await callback.answer()

@router.message(AddIDState.waiting_for_id)
async def save_payout_id(message: types.Message, state: FSMContext):
    new_id = message.text.strip()

    if not new_id.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    admin, settings = await get_admin_and_settings(message.from_user.id)
    if not admin:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    ids = [i.strip() for i in (settings.payout_ids or "").split(",") if i.strip()]
    if new_id not in ids:
        ids.append(new_id)
    settings.payout_ids = ",".join(ids)

    admin.worker_added_payout_id_flag = True

    async with Session() as session:
        session.add_all([settings, admin])
        await session.commit()

    await state.clear()
    await message.answer("‚úÖ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>", parse_mode="HTML")
    await send_transfer_status(message)

@router.callback_query(F.data == "manage_workers")
async def manage_workers(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  

    _, settings = await get_admin_and_settings(callback.from_user.id)
    ids = [i.strip() for i in settings.payout_ids.split(",") if i.strip()] if settings and settings.payout_ids else []

    text = (
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É (Telegram ID), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞. "
        "–£–¥–∞–ª—ë–Ω–Ω—ã–µ ID –±–æ–ª—å—à–µ <b>–Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏</b>.\n\n"
        "<b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö ID:</b>"
    )

    keyboard_buttons = [[InlineKeyboardButton(text=f"{pid}", callback_data=f"confirm_delete_{pid}")] for pid in ids]
    keyboard_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_id(callback: types.CallbackQuery):
    pid = callback.data.split("_")[-1]
    text = f"‚ùóÔ∏è–£–¥–∞–ª–∏—Ç—å ID <code>{pid}</code> –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏?"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"delete_id_{pid}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="manage_workers")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("delete_id_"))
async def delete_id(callback: types.CallbackQuery, state: FSMContext):
    pid = callback.data.split("_")[-1]
    admin, settings = await get_admin_and_settings(callback.from_user.id)

    async with Session() as session:
        query = select(WorkerBot).where(
            WorkerBot.owner_id == admin.id,
            WorkerBot.nft_transfer_to_id == int(pid)
        )
        result = await session.execute(query)
        used_bot = result.scalar_one_or_none()

        if used_bot:
            await callback.answer(
                f"‚ùå ID {pid} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É @{used_bot.username} –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω.",
                show_alert=True
            )
            return

        if settings and settings.payout_ids:
            ids = [i.strip() for i in settings.payout_ids.split(",") if i.strip()]
            if pid in ids:
                ids.remove(pid)
                settings.payout_ids = ",".join(ids)
                admin.worker_added_payout_id_flag = bool(ids)

                session.add_all([settings, admin])
                await session.commit()

    await callback.answer(text=f"‚úÖ ID {pid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", show_alert=True)
    await manage_workers(callback, state)

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  
    await send_transfer_status(callback)

@router.callback_query(F.data == "open_transfer_menu")
async def open_transfer_menu(callback: types.CallbackQuery):
    _, settings = await get_admin_and_settings(callback.from_user.id)

    transfer_stars = getattr(settings, "transfer_stars_enabled", True)
    convert_gifts = getattr(settings, "convert_gifts_to_stars_enabled", True)

    transfer_stars_text = "‚úÖ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã" if transfer_stars else "‚ùå –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã"
    convert_gifts_text = "‚úÖ –û–±–º–µ–Ω–∏–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏" if convert_gifts else "‚ùå –û–±–º–µ–Ω–∏–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏"

    text = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏</b>\n\n"
        f"{transfer_stars_text}\n"
        f"{convert_gifts_text}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=transfer_stars_text, callback_data="toggle_transfer_stars")],
        [InlineKeyboardButton(text=convert_gifts_text, callback_data="toggle_convert_gifts")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])

    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except:
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()


@router.callback_query(F.data == "toggle_transfer_stars")
async def toggle_transfer_stars(callback: types.CallbackQuery):
    admin, settings = await get_admin_and_settings(callback.from_user.id)
    settings.transfer_stars_enabled = not getattr(settings, "transfer_stars_enabled", True)

    async with Session() as session:
        session.add(settings)
        await session.commit()

    try:
        await callback.message.delete()
    except:
        pass

    await open_transfer_menu(callback)


@router.callback_query(F.data == "toggle_convert_gifts")
async def toggle_convert_gifts(callback: types.CallbackQuery):
    admin, settings = await get_admin_and_settings(callback.from_user.id)
    settings.convert_gifts_to_stars_enabled = not getattr(settings, "convert_gifts_to_stars_enabled", True)

    async with Session() as session:
        session.add(settings)
        await session.commit()

    try:
        await callback.message.delete()
    except:
        pass

    await open_transfer_menu(callback)