import os
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from models import Template, Admin, WorkerBot
from db import Session
from loader import bot
from aiogram.exceptions import TelegramBadRequest
from imgbb_api import upload_image_from_file

router = Router()

class TemplateCreate(StatesGroup):
    waiting_name = State()
    waiting_after_start = State()
    waiting_non_premium_text = State()
    waiting_no_rights_text = State()
    waiting_disconnect_text = State()
    waiting_button_text = State()  
    waiting_button_url = State() 
    waiting_photo_url = State()
    waiting_video_file = State()
    waiting_second_button_text = State()        
    waiting_second_button_reply = State()

class TemplateEdit(StatesGroup):
    waiting_after_start_text = State()
    waiting_non_premium_text = State()
    waiting_no_rights_text = State()
    waiting_disconnect_text = State()
    waiting_new_photo = State()
    waiting_new_video = State()
    waiting_button_text = State()
    waiting_button_url = State()
    waiting_second_button_text = State()      
    waiting_second_button_reply = State()     
 
kb_skip_no_rights = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_no_rights_text")]
    ]
)
kb_skip_disconnect = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_disconnect_text")]
    ]
)

kb_skip_button_text = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_button_text")]]
)
kb_skip_button_url = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_button_url")]]
)

kb_skip_second_button_text = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_second_button_text")]]
)
kb_skip_second_button_reply = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_second_button_reply")]]
)


async def get_admin(tg_id: int) -> Admin | None:
    async with Session() as session:
        result = await session.execute(select(Admin).where(Admin.telegram_id == tg_id))
        return result.scalar_one_or_none()

@router.message(F.text == "üß© –®–∞–±–ª–æ–Ω—ã")
async def templates_handler(message: types.Message):
    if message.chat.type != "private":
        await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return

    await get_templates_main_menu(message)

@router.callback_query(F.data == "back_to_templates")
async def back_to_templates(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  
    await get_templates_main_menu(callback)

async def save_template(state: FSMContext, admin: Admin, media: dict):
    data = await state.get_data()
    async with Session() as session:
        template = Template(
            name=data["name"],
            after_start=data["after_start"],
            non_premium_text=data["non_premium_text"],
            no_rights_text=data.get("no_rights_text"),
            disconnect_text=data.get("disconnect_text"),
            button_text=data.get("button_text"),
            button_url=data.get("button_url"),
            second_button_text=data.get("second_button_text"),          
            second_button_reply=data.get("second_button_reply"),         
            video_path=media.get("video_path"),
            photo_url=media.get("photo_url"),
            owner_id=admin.id
        )
        session.add(template)
        await session.commit()

# üß© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤
async def get_templates_main_menu(target: types.Message | types.CallbackQuery):
    text = (
        "<b>üìë –®–∞–±–ª–æ–Ω—ã</b>\n\n"
        "<b>üìç –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω.</b>"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")],
        [InlineKeyboardButton(text="–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data="my_templates")],
        #[InlineKeyboardButton(text="–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã", callback_data="ready_templates")]
    ])

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await target.answer()
    else:
        await target.answer(text, reply_markup=kb, parse_mode="HTML")

# –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@router.callback_query(F.data == "create_template")
async def start_template_creation(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TemplateCreate.waiting_name)
    await callback.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</b>", parse_mode="HTML")
    await callback.answer()

@router.message(TemplateCreate.waiting_name)
async def get_template_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(TemplateCreate.waiting_after_start)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /start:\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>",
        parse_mode="HTML"
    )

@router.message(TemplateCreate.waiting_after_start)
async def get_after_start_text(message: types.Message, state: FSMContext):
    await state.update_data(after_start=message.html_text)
    await state.set_state(TemplateCreate.waiting_non_premium_text)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ-–ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>",
        parse_mode="HTML"
    )

@router.message(TemplateCreate.waiting_non_premium_text)
async def get_non_premium_text(message: types.Message, state: FSMContext):
    await state.update_data(non_premium_text=message.html_text)
    await state.set_state(TemplateCreate.waiting_no_rights_text)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –º–∞–º–æ–Ω—Ç –µ—Å–ª–∏ –Ω–µ –≤—ã–¥–∞–ª –ø—Ä–∞–≤–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω—Ñ—Ç\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>",
        reply_markup=kb_skip_no_rights,
        parse_mode="HTML"
    )

@router.message(TemplateCreate.waiting_no_rights_text)
async def get_no_rights_text(message: types.Message, state: FSMContext):
    await state.update_data(no_rights_text=message.html_text)
    await state.set_state(TemplateCreate.waiting_disconnect_text)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –æ—Ç –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>",
        reply_markup=kb_skip_disconnect,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "skip_no_rights_text")
async def skip_no_rights_text_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(no_rights_text=None)
    await state.set_state(TemplateCreate.waiting_disconnect_text)
    await callback.message.edit_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –æ—Ç –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>",
        reply_markup=kb_skip_disconnect,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateCreate.waiting_disconnect_text)
async def get_disconnect_text(message: types.Message, state: FSMContext):
    await state.update_data(disconnect_text=message.html_text)
    await state.set_state(TemplateCreate.waiting_button_text)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏:</b>",
        reply_markup=kb_skip_button_text,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "skip_disconnect_text")
async def skip_disconnect_text_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(disconnect_text=None)
    await state.set_state(TemplateCreate.waiting_button_text)
    await callback.message.edit_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏:</b>",
        reply_markup=kb_skip_button_text,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateCreate.waiting_button_text)
async def get_button_text(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await state.set_state(TemplateCreate.waiting_button_url)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:</b>",
        reply_markup=kb_skip_button_url,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "skip_button_text")
async def skip_button_text_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(button_text=None)
    await state.set_state(TemplateCreate.waiting_button_url)
    await callback.message.edit_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:</b>",
        reply_markup=kb_skip_button_url,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateCreate.waiting_button_url)
async def get_button_url(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    await state.set_state(TemplateCreate.waiting_second_button_text)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏:</b>",
        reply_markup=kb_skip_second_button_text,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "skip_button_url")
async def skip_button_url_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(button_url=None)
    await state.set_state(TemplateCreate.waiting_second_button_text)
    await callback.message.edit_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏:</b>",
        reply_markup=kb_skip_second_button_text,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateCreate.waiting_second_button_text)
async def get_second_button_text(message: types.Message, state: FSMContext):
    await state.update_data(second_button_text=message.text)  
    await state.set_state(TemplateCreate.waiting_second_button_reply)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É:</b>",
        reply_markup=kb_skip_second_button_reply,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "skip_second_button_text")
async def skip_second_button_text_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(second_button_text=None)
    await state.set_state(TemplateCreate.waiting_second_button_reply)
    await callback.message.edit_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É:</b>",
        reply_markup=kb_skip_second_button_reply,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateCreate.waiting_second_button_reply)
async def get_second_button_reply(message: types.Message, state: FSMContext):
    await state.update_data(second_button_reply=message.html_text)  
    await send_choose_media(message)

@router.callback_query(F.data == "skip_second_button_reply")
async def skip_second_button_reply_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(second_button_reply=None)
    await send_choose_media(callback)

async def send_choose_media(target):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–∏–¥–µ–æ", callback_data="template_media_video")],
            [InlineKeyboardButton(text="–§–æ—Ç–æ", callback_data="template_media_photo")],
            [InlineKeyboardButton(text="–ë–µ–∑ –º–µ–¥–∏–∞", callback_data="template_media_none")]
        ]
    )
    text = "<b>üéâ –®–∞–±–ª–æ–Ω –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞-—Ç–∏–ø:</b>"
    if isinstance(target, types.Message):
        await target.answer(text, reply_markup=kb, parse_mode="HTML")
    else:
        await target.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await target.answer()

# üì∏ –§–æ—Ç–æ
@router.callback_query(F.data == "template_media_photo")
async def ask_photo(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TemplateCreate.waiting_photo_url)
    await callback.message.edit_text("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞</b>", parse_mode="HTML")
    await callback.answer()

@router.message(TemplateCreate.waiting_photo_url, F.photo)
async def save_photo_and_template(message: types.Message, state: FSMContext):
    admin = await get_admin(message.from_user.id)
    if not admin:
        await message.answer("<b>‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ—Ä–∫–µ—Ä.</b>", parse_mode="HTML")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    file_id = message.photo[-1].file_id  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    file = await bot.get_file(file_id)
    file_path = f"temp_photo_{file_id}.jpg"
    await bot.download_file(file.file_path, destination=file_path)

    # –ó–∞–ª–∏–≤–∞–µ–º –Ω–∞ imgbb –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
    url = await upload_image_from_file(file_path)
    os.remove(file_path)

    if not url:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ imgbb.")
        return

    await state.update_data(photo_url=url)
    await save_template(state, admin, {"photo_url": url})
    await state.clear()
    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await get_templates_main_menu(message)

@router.message(TemplateCreate.waiting_photo_url)
async def wrong_photo_input(message: types.Message):
    await message.answer("<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.</b>", parse_mode="HTML")

# üé• –í–∏–¥–µ–æ
@router.callback_query(F.data == "template_media_video")
async def ask_video_file(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TemplateCreate.waiting_video_file)
    await callback.message.edit_text("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è —à–∞–±–ª–æ–Ω–∞</b>", parse_mode="HTML")
    await callback.answer()

@router.message(TemplateCreate.waiting_video_file, F.video)
async def save_video_template(message: types.Message, state: FSMContext):
    admin = await get_admin(message.from_user.id)
    if not admin:
        await message.answer("<b>‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ—Ä–∫–µ—Ä.</b>", parse_mode="HTML")
        return

    folder_path = os.path.join("–í–∏–¥–µ–æ", str(admin.telegram_id))
    os.makedirs(folder_path, exist_ok=True)
    file_path = os.path.join(folder_path, f"{message.video.file_unique_id}.mp4")

    file = await bot.get_file(message.video.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    await save_template(state, admin, {"video_path": file_path})
    await state.clear()
    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω —Å –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", show_alert=True)
    await get_templates_main_menu(message)

@router.message(TemplateCreate.waiting_video_file)
async def wrong_video_input(message: types.Message):
    await message.answer("<b>‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.</b>", parse_mode="HTML")

# üö´ –ë–µ–∑ –º–µ–¥–∏–∞
@router.callback_query(F.data == "template_media_none")
async def save_template_without_media(callback: types.CallbackQuery, state: FSMContext):
    admin = await get_admin(callback.from_user.id)
    if not admin:
        await callback.message.edit_text("<b>‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ—Ä–∫–µ—Ä.</b>", parse_mode="HTML")
        await callback.answer()
        return
    await save_template(state, admin, {})
    await state.clear()
    await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω –±–µ–∑ –º–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", show_alert=True)
    await get_templates_main_menu(callback)

# üóÇ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã
@router.callback_query(F.data == "my_templates")
async def show_my_templates(callback: types.CallbackQuery):
    admin = await get_admin(callback.from_user.id)
    if not admin:
        await callback.message.edit_text("<b>‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ—Ä–∫–µ—Ä.</b>", parse_mode="HTML")
        await callback.answer()
        return

    async with Session() as session:
        result = await session.execute(select(Template).where(Template.owner_id == admin.id))
        templates = result.scalars().all()

    if not templates:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_templates")]
        ])
        await callback.message.edit_text("<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.</b>", reply_markup=kb, parse_mode="HTML")
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t.name, callback_data=f"template_{t.id}")] for t in templates
    ] + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_templates")]])

    await callback.message.edit_text("<b>üìå –í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:</b>", reply_markup=kb, parse_mode="HTML")
    await callback.answer()

async def send_template_details(callback_or_message: types.CallbackQuery | types.Message, template: Template):
    if template.photo_url and template.video_path:
        media_info = "–ü—Ä–∏–≤—è–∑–∞–Ω—ã —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ"
    elif template.photo_url:
        media_info = "–ü—Ä–∏–≤—è–∑–∞–Ω–æ —Ñ–æ—Ç–æ"
    elif template.video_path:
        media_info = "–ü—Ä–∏–≤—è–∑–∞–Ω–æ –≤–∏–¥–µ–æ"
    else:
        media_info = "–ë–µ–∑ –º–µ–¥–∏–∞ –∏ —Ñ–æ—Ç–æ"

    text = (
        f"<b>üìÑ –®–∞–±–ª–æ–Ω:</b> <code>{template.name}</code>\n\n"
        f"<b>üì¶ –ú–µ–¥–∏–∞:</b> {media_info}"
    )

    kb_buttons = [
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç /start", callback_data=f"edit_after_start_{template.id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–º–∏—É–º", callback_data=f"edit_non_premium_{template.id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–∞–≤", callback_data=f"edit_no_rights_{template.id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏", callback_data=f"edit_disconnect_{template.id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏", callback_data=f"edit_button_text_{template.id}")],         
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏", callback_data=f"edit_button_url_{template.id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏", callback_data=f"edit_second_button_text_{template.id}")],    
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏", callback_data=f"edit_second_button_reply_{template.id}")],     
    ]

    if template.photo_url or template.video_path:
        kb_buttons.append([InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"edit_media_{template.id}")])

    kb_buttons.append([InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"delete_template_{template.id}")])
    kb_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="my_templates")])

    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)

    if isinstance(callback_or_message, types.CallbackQuery) and callback_or_message.message:
        try:
            await callback_or_message.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        except Exception:
            await callback_or_message.message.answer(text, reply_markup=kb, parse_mode="HTML")
        await callback_or_message.answer()
    else:
        await callback_or_message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.regexp(r"^template_\d+$"))
async def show_template_details(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()

    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await send_template_details(callback, template)

@router.callback_query(F.data.startswith("edit_after_start_"))
async def edit_after_start_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateEdit.waiting_after_start_text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /start:</b>\n\n{template.after_start}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateEdit.waiting_after_start_text)
async def save_new_after_start_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if not template_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    new_text = message.html_text  

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return
        template.after_start = new_text
        await session.commit()

    await message.answer("<b>‚úÖ –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>", parse_mode="HTML") 

    await state.clear()

    await send_template_details(message, template)

@router.callback_query(F.data.startswith("edit_non_premium_"))
async def edit_non_premium_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateEdit.waiting_non_premium_text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{template.non_premium_text or '(–ø—É—Å—Ç–æ)'}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateEdit.waiting_non_premium_text)
async def save_new_non_premium_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if not template_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    new_text = message.html_text  

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return
        template.non_premium_text = new_text
        await session.commit()

    await message.answer("<b>‚úÖ –¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>", parse_mode="HTML")

    await state.clear()

    await send_template_details(message, template)

# ‚úÖ –ü–µ—Ä–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.regexp(r"^delete_template_\d+$"))
async def confirm_delete_template(callback: types.CallbackQuery):
    template_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    async with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        template = await session.get(Template, template_id)

        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        query = (
            select(WorkerBot)
            .where(
                WorkerBot.template_id == template_id,
                WorkerBot.owner.has(telegram_id=user_id)
            )
        )
        result = await session.execute(query)
        bot_using_template = result.scalar_one_or_none()

        if bot_using_template:
            await callback.answer(
                f"‚ö†Ô∏è –≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É @{bot_using_template.username} –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω.",
                show_alert=True
            )
            return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data=f"delete_template_confirm_{template_id}"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"template_{template_id}")
        ]
    ])

    text = f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω <b>{template.name}</b>?"
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.regexp(r"^delete_template_confirm_\d+$"))
async def delete_template(callback: types.CallbackQuery):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        await session.delete(template)
        await session.commit()

    await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", show_alert=True)

    await show_my_templates(callback)

@router.callback_query(F.data.startswith("edit_media_"))
async def edit_media_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    if template.photo_url:
        await state.set_state(TemplateEdit.waiting_new_photo)
        await callback.message.edit_text(
            "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
    elif template.video_path:
        await state.set_state(TemplateEdit.waiting_new_video)
        await callback.message.edit_text(
            "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª:</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –£ —à–∞–±–ª–æ–Ω–∞ –Ω–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    await callback.answer()

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
@router.message(TemplateEdit.waiting_new_photo, F.photo)
async def save_new_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")

    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = f"temp_photo_{file_id}.jpg"
    await bot.download_file(file.file_path, destination=file_path)

    url = await upload_image_from_file(file_path)
    os.remove(file_path)

    if not url:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ imgbb.")
        await state.clear()
        return

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        template.photo_url = url
        await session.commit()

    await message.answer("<b>‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")
    await state.clear()
    await send_template_details(message, template)

@router.message(TemplateEdit.waiting_new_photo)
async def wrong_photo_input_edit(message: types.Message):
    await message.answer("<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.</b>", parse_mode="HTML")

@router.message(TemplateEdit.waiting_new_video, F.video)
async def save_new_video(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        admin = template.owner
        folder_path = os.path.join("–í–∏–¥–µ–æ", str(admin.telegram_id))
        os.makedirs(folder_path, exist_ok=True)
        file_path = os.path.join(folder_path, f"{message.video.file_unique_id}.mp4")

        file = await bot.get_file(message.video.file_id)
        await bot.download_file(file.file_path, destination=file_path)

        template.video_path = file_path
        await session.commit()

    await message.answer("<b>‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")
    await state.clear()
    await send_template_details(message, template)

@router.message(TemplateEdit.waiting_new_video)
async def wrong_video_input_edit(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.", parse_mode="HTML")

@router.callback_query(F.data.startswith("edit_no_rights_"))
async def edit_no_rights_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateEdit.waiting_no_rights_text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ –≤—ã–¥–∞–ª –ø—Ä–∞–≤–∞:</b>\n\n{template.no_rights_text or '(–ø—É—Å—Ç–æ)'}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateEdit.waiting_no_rights_text)
async def save_new_no_rights_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if not template_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    new_text = message.html_text

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return
        template.no_rights_text = new_text
        await session.commit()

    await message.answer("<b>‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>", parse_mode="HTML")
    await state.clear()
    await send_template_details(message, template)

@router.callback_query(F.data.startswith("edit_disconnect_"))
async def edit_disconnect_text_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateEdit.waiting_disconnect_text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:</b>\n\n{template.disconnect_text or '(–ø—É—Å—Ç–æ)'}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateEdit.waiting_disconnect_text)
async def save_new_disconnect_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if not template_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    new_text = message.html_text

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return
        template.disconnect_text = new_text
        await session.commit()

    await message.answer("<b>‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>", parse_mode="HTML")
    await state.clear()
    await send_template_details(message, template)

# === –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏" ===
@router.callback_query(F.data.startswith("edit_button_text_"))
async def edit_button_text_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateEdit.waiting_button_text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b>\n\n{template.button_text or '(–ø—É—Å—Ç–æ)'}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateEdit.waiting_button_text)
async def save_new_button_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if not template_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    new_text = message.text

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return
        template.button_text = new_text
        await session.commit()

    await message.answer("<b>‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>", parse_mode="HTML")
    await state.clear()
    await send_template_details(message, template)

# === –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏" ===
@router.callback_query(F.data.startswith("edit_button_url_"))
async def edit_button_url_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateEdit.waiting_button_url)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏:</b>\n\n{template.button_url or '(–ø—É—Å—Ç–æ)'}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateEdit.waiting_button_url)
async def save_new_button_url(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if not template_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    new_url = message.text

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return
        template.button_url = new_url
        await session.commit()

    await message.answer("<b>‚úÖ –°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>", parse_mode="HTML")
    await state.clear()
    await send_template_details(message, template)

@router.callback_query(F.data.startswith("edit_second_button_reply_"))
async def edit_second_button_reply_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateEdit.waiting_second_button_reply)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏:</b>\n\n{template.second_button_reply or '(–ø—É—Å—Ç–æ)'}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateEdit.waiting_second_button_text)
async def save_new_second_button_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if not template_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    new_text = message.text

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return
        template.second_button_text = new_text
        await session.commit()

    await message.answer("<b>‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")
    await state.clear()
    await send_template_details(message, template)

@router.callback_query(F.data.startswith("edit_second_button_text_"))
async def edit_second_button_text_handler(callback: types.CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split("_")[-1])
    tg_id = callback.from_user.id

    async with Session() as session:
        stmt = select(Template).where(
            Template.id == template_id,
            Template.owner.has(telegram_id=tg_id)
        )
        result = await session.execute(stmt)
        template = result.scalar_one_or_none()

    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateEdit.waiting_second_button_text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])

    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏:</b>\n\n{template.second_button_text or '(–ø—É—Å—Ç–æ)'}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TemplateEdit.waiting_second_button_reply)
async def save_new_second_button_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if not template_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    new_text = message.html_text 

    async with Session() as session:
        template = await session.get(Template, template_id)
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            await state.clear()
            return
        template.second_button_reply = new_text
        await session.commit()

    await message.answer("<b>‚úÖ –¢–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>", parse_mode="HTML")
    await state.clear()
    await send_template_details(message, template)