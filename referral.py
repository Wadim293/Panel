from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from db import Session
from models import Admin

router = Router()

BOT_USERNAME = "Alphasqquad_bot"
REFERRALS_PER_PAGE = 7

@router.callback_query(F.data.startswith("referral"))
async def referral_handler(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    page = int(parts[1]) if len(parts) > 1 else 1

    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{callback.from_user.id}"

    async with Session() as session:
        admin = (await session.execute(
            select(Admin).where(Admin.telegram_id == callback.from_user.id)
        )).scalar_one_or_none()
        if not admin:
            await callback.message.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        referrals = (await session.execute(
            select(Admin).where(Admin.referred_by == admin.telegram_id)
        )).scalars().all()
        referrals_count = len(referrals)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_nft = sum(getattr(ref, "gifts_unique_sent", 0) or 0 for ref in referrals)
        total_stars = sum(getattr(ref, "stars_sent", 0) or 0 for ref in referrals)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = referrals_count
        pages = (total + REFERRALS_PER_PAGE - 1) // REFERRALS_PER_PAGE or 1
        page = max(1, min(page, pages))
        start = (page - 1) * REFERRALS_PER_PAGE
        end = start + REFERRALS_PER_PAGE
        page_refs = referrals[start:end]

        if referrals:
            referrals_text = "<b>–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n\n"
            for ref in page_refs:
                line = f"‚Ä¢ <b>ID:</b> <code>{ref.telegram_id}</code>"
                if ref.username:
                    line += f" | <b>@{ref.username}</b>"
                line += (
                    f" | üéÜ <b>{getattr(ref, 'gifts_unique_sent', 0)}</b>"
                    f" | ‚≠êÔ∏è <b>{getattr(ref, 'stars_sent', 0)}</b>"
                )
                referrals_text += line + "\n"
        else:
            referrals_text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n"

    text = (
        f"<b>üöÄ –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{ref_link}</code>\n\n"
        f"<b>üíÅüèª‚Äç‚ôÄÔ∏è –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}</b>\n\n"
        f"{referrals_text}\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n"
        f"‚Ä¢ üéÜ NFT: <b>{total_nft}</b>\n"
        f"‚Ä¢ ‚≠êÔ∏è –ó–≤—ë–∑–¥: <b>{total_stars}</b>\n\n"
        "<blockquote>"
        f"<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ –∏ –∑–∞—á–µ–º –æ–Ω–∞ –Ω—É–∂–Ω–∞?</b>\n"
        f"–ö–∞–∂–¥—ã–π —Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ —Å–Ω–∏–∂–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é.\n"
        f"–ö–æ–≥–¥–∞ —Ç–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Å—É–º–º–∞—Ä–Ω–æ —Å–¥–µ–ª–∞—é—Ç 15 —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ NFT, —Ç–≤–æ—è –∫–æ–º–∏—Å—Å–∏—è –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ 20 —á–∞—Å–æ–≤.\n"
        f"–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É ‚Äî –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–π–¥–µ—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –Ω–µ–π, —Ç—ã —É–≤–∏–¥–∏—à—å –µ–≥–æ —Ç—É—Ç!\n"
        "</blockquote>"
    )

    nav = [
        InlineKeyboardButton(text="<", callback_data=f"referral:{page-1}" if page > 1 else "ignore"),
        InlineKeyboardButton(text=f"{page}/{pages}", callback_data="ignore"),
        InlineKeyboardButton(text=">", callback_data=f"referral:{page+1}" if page < pages else "ignore")
    ]
    buttons = [nav, [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_profile")]]

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: types.CallbackQuery, state: FSMContext):
    from profilee import build_profile_text_and_kb
    text, kb = await build_profile_text_and_kb(callback.from_user.id)
    if text:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()